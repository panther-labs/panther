// Code generated by genlambdamux; DO NOT EDIT.
package logtypesapi

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import (
	"context"

	"github.com/panther-labs/panther/pkg/lambdamux"
)

type ListAvailableLogTypesOutput = AvailableLogTypes

type LambdaAPIEvent struct {
	ListAvailableLogTypes *struct{}
}

type LambdaClient struct {
	client lambdamux.Client
}

func NewLambdaClient(client lambdamux.Client) *LambdaClient {
	if client.Validate == nil {
		client.Validate = nopValidate
	}
	return &LambdaClient{
		client: client,
	}
}
func nopValidate(_ interface{}) error { return nil }

func (c *LambdaClient) ListAvailableLogTypes(ctx context.Context) (*ListAvailableLogTypesOutput, error) {
	lambdaEvent := LambdaAPIEvent{
		ListAvailableLogTypes: &struct{}{},
	}
	output := ListAvailableLogTypesOutput{}
	if err := c.client.InvokeWithContext(ctx, &lambdaEvent, &output); err != nil {
		return nil, err
	}
	return &output, nil
}

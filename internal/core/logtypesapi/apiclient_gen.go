// Code generated by genlambdamux; DO NOT EDIT.
package logtypesapi

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import (
	"context"
	"encoding/json"

	"github.com/aws/aws-sdk-go/service/lambda"
	"github.com/aws/aws-sdk-go/service/lambda/lambdaiface"
	"github.com/pkg/errors"
)

type ListAvailableLogTypesOutput = AvailableLogTypes

type LambdaAPIEvent struct {
	ListAvailableLogTypes *struct{}
}

type LambdaClient struct {
	lambdaAPI  lambdaiface.LambdaAPI
	lambdaName string
}

func NewLambdaClient(lambdaAPI lambdaiface.LambdaAPI, lambdaName string) *LambdaClient {
	return &LambdaClient{
		lambdaAPI:  lambdaAPI,
		lambdaName: lambdaName,
	}
}

func (c *LambdaClient) ListAvailableLogTypes(ctx context.Context) (*ListAvailableLogTypesOutput, error) {
	lambdaEvent := LambdaAPIEvent{
		ListAvailableLogTypes: &struct{}{},
	}

	payload, err := json.Marshal(&lambdaEvent)
	if err != nil {
		return nil, err
	}

	lambdaInput := lambda.InvokeInput{
		FunctionName: &c.lambdaName,
		Payload:      payload,
	}

	lambdaOutput, err := c.lambdaAPI.InvokeWithContext(ctx, &lambdaInput)
	if err != nil {
		return nil, err
	}

	if lambdaError := lambdaOutput.FunctionError; lambdaError != nil {
		return nil, errors.New(*lambdaError)
	}

	output := ListAvailableLogTypesOutput{}
	if err := json.Unmarshal(lambdaOutput.Payload, &output); err != nil {
		return nil, err
	}

	return &output, nil
}

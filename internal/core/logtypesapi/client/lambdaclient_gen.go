// Code generated by apigen; DO NOT EDIT.
package logtypesclient

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import (
	"context"

	lambdaclient "github.com/panther-labs/panther/pkg/x/apigen/lambdaclient"
)

// Models

type LambdaEventPayload struct {
	ListAvailableLogTypes *struct{}
}

type ListAvailableLogTypesOutput struct {
	LogTypes string `json:"logTypes"`
}

// Lambda client

type LambdaClient struct {
	client lambdaclient.Client
}

func NewLambdaClient(client lambdaclient.Client) *LambdaClient {
	if client.Validate == nil {
		client.Validate = func(interface{}) error { return nil }
	}
	return &LambdaClient{
		client: client,
	}
}

func (c *LambdaClient) ListAvailableLogTypes(ctx context.Context) (*ListAvailableLogTypesOutput, error) {
	lambdaEvent := LambdaEventPayload{
		ListAvailableLogTypes: &struct{}{},
	}
	output := ListAvailableLogTypesOutput{}
	if err := c.client.InvokeWithContext(ctx, &lambdaEvent, &output); err != nil {
		return nil, err
	}
	return &output, nil
}

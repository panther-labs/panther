// Code generated for package logschema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.json
package logschema

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\xdf\x73\x13\xb7\x13\x7f\xcf\x5f\xa1\x11\xf9\xbe\x80\x8d\xc3\x37\xa5\x1d\xf2\xd2\x81\x14\x06\x66\x60\xc8\x90\x02\x53\x12\x27\xa3\xdc\xed\xd9\xa2\x3a\xe9\x2a\xe9\xf2\x03\xc6\xff\x7b\xe7\x7e\xf9\x24\x9d\x74\x3e\xc7\x31\x9d\x52\x1e\x80\xb3\xa4\x5d\xed\xae\x3e\x9f\xd5\x4a\xe2\xeb\x0e\x42\x78\x57\x45\x73\x48\x09\x3e\x40\x78\xae\x75\x76\x30\x99\x7c\x56\x82\x8f\xab\xd6\x87\x42\xce\x26\xb1\x24\x89\x1e\xef\xfd\x32\xa9\xda\xee\xe1\x51\x21\xa7\xa9\x66\x50\x48\x1d\x11\xae\xe7\x20\x11\x13\x33\x54\xeb\x2a\x07\xec\xd2\xb8\x51\xaa\x0e\x26\x13\x99\xf3\xac\x1a\xf9\x90\x8a\x5a\x95\x9a\x30\x31\x53\x19\x44\x93\xcb\xbd\x5a\x48\x42\x52\x48\xdd\x9b\xc4\x90\x50\x4e\x35\x15\x5c\xd5\xa3\x8f\x33\x88\xaa\x51\x46\x1f\x3e\x40\x85\x1b\x08\x61\x63\x50\xd3\x56\x98\x79\x93\x95\x56\x8a\x8b\xcf\x10\xe9\x52\xbc\x6c\xcf\xa4\xc8\x40\x6a\x0a\xca\x18\x8d\x10\xbe\x04\xa9\xa8\xe0\x56\x23\x42\x38\x12\x5c\x69\x7c\x80\xf6\x96\x8d\x8b\x51\x2b\xb4\x0c\xa1\x25\xd3\x4c\xad\xb4\xa4\x7c\x86\x47\x66\x5f\x4a\xf9\x6b\xe0\x33\x3d\xc7\x07\x68\xdf\xea\xc9\x88\xd6\x20\x0b\x03\xf0\xd9\xc9\xd3\xf1\xa7\x69\xf1\x17\x19\x7f\xd9\x1b\x3f\x99\x3e\xd8\xc5\xde\xf9\x63\x50\x91\xa4\x99\xf6\x18\xee\x18\xe1\x15\x97\x90\x80\x04\x1e\xc1\xfb\x77\xaf\xd7\x71\x22\x11\x32\x25\x45\x54\x70\x2e\xa9\x5f\x75\x46\xa4\x02\xe9\x2a\x4d\xc9\xf5\x91\x19\xff\x47\x6e\x6c\x7a\x7a\x03\x0b\x57\xad\x92\xba\xec\x34\x22\x84\x05\x87\xb7\x05\xaa\x4e\x9c\x0e\xd4\x19\x5a\x0e\xf7\x63\xb0\xf2\xe4\xf0\xf8\xc3\x47\xaa\xe7\x2f\x81\xc4\x20\x71\x47\x7a\x31\xba\xb3\x29\x44\xae\x83\xb3\x38\x2d\xd3\x9d\x1e\x1b\x70\x42\x94\x4e\x89\x8e\xe6\xbe\xd0\xf4\x19\xf2\x82\x28\xfd\xa6\x14\xec\xd5\x2f\x61\x06\xd7\xeb\xea\x7e\x57\x08\xf9\x94\xef\xf8\xbe\x4d\x44\x25\x14\x58\xec\xae\x7d\x60\xae\x8a\xf4\x2f\x2a\x89\x00\x73\xba\x99\xa4\xee\x0a\x64\x0e\x64\x90\xf4\xa8\x07\x8b\x3e\xf2\x0e\x0e\xd2\x25\x61\x39\x94\xa9\x2c\x1c\x1d\xcb\x20\x12\xc7\xa5\x28\x61\x96\x4d\x09\x61\x0a\x76\x5c\xf1\xa5\x28\x96\xf0\x57\x4e\x25\x14\x89\xfa\x64\x99\xfa\x46\xcb\x20\x57\xc0\xaa\x87\x63\x2b\x9a\x9e\x14\x4b\xa4\x24\x37\x6d\x86\x4d\x29\x7f\xa5\x21\xb5\x18\x8c\x69\xdd\x62\x64\x5c\x7f\x04\x4a\x0b\xcc\x08\x2c\x2c\x5b\xda\x6e\xc3\x10\xc2\x98\xc3\xf3\xe1\x0b\xda\xb3\x92\x9c\xa4\xe0\x5b\xba\x50\x6a\xed\xac\x8e\x1d\xe8\xa0\x9e\x0b\x21\x18\x10\xde\xaf\xa8\x1e\x3c\x10\x47\xc5\xe8\xe3\xa8\x03\x23\x47\x67\x78\xfb\x58\xed\x67\x10\x91\x16\xb4\xca\x10\x8e\x6a\x55\x53\x1f\x13\x07\xb0\xd9\x43\x8a\x66\x7a\x1b\xa8\xed\x40\x03\x1c\xdd\x4d\x60\xc0\x94\x95\xcb\xce\x9c\x6b\x19\x5d\x81\x6d\x13\x0d\x25\xad\x36\x51\xa0\x22\xc2\x88\xdc\x44\x83\xa6\xa9\x1b\xf8\xb5\xe4\x25\x24\x43\xd6\x6d\x89\x56\x4f\x72\x71\xea\x0f\x0c\x3c\x4f\xad\xd5\xec\x56\x28\x5d\xa2\x3b\x29\x0a\x21\x5c\xd4\xba\xe6\x6f\xca\xad\xf1\x09\x13\xc4\x6a\x50\x29\x61\xcc\x19\x74\x41\x67\x6e\x4b\xcd\x64\xa3\xa9\x08\xa1\xd2\x24\xcd\xb0\x5d\x78\x61\x6f\x24\x0c\xd4\x6c\x50\xcb\x7a\x72\xc5\xb2\x90\x6d\x94\x6c\x6b\x8f\xed\xdf\x6a\x4a\xcb\x42\xfb\x4c\x0b\xf8\x6d\xf9\x5e\xc1\xc0\xeb\x3a\x30\x48\x81\xeb\x61\xbe\xf7\x64\xa4\x15\x8e\x37\xd3\xd8\x9e\x1b\x4c\xbd\x63\xd7\xfb\xca\xf8\x86\x4a\x15\xf8\x97\xa0\x6f\x81\x6d\xc2\xbe\xa1\x4c\x0b\xf2\xe9\x5a\xbe\x3b\x0e\xb7\xf9\x75\x5b\x6b\xdd\x77\xf0\xa1\x3c\xa6\x11\xd1\x42\x06\x8b\x3f\x37\x61\x78\x4b\x98\x1e\x84\x2c\x67\x30\xb7\xcd\xc5\x06\x11\x6b\x15\xde\x2a\x49\x52\x2b\xff\xc4\x22\x25\xd4\x4a\x53\x73\xa1\x74\xb5\x59\xb7\x6d\xb9\x64\xe6\x4f\x0e\xfa\x9c\xc4\xb1\x34\xdb\xd2\xf8\xb1\x95\x25\xe7\xe4\x91\xf3\xfb\xff\x8f\x7f\xb6\x12\xf1\x95\x3a\x27\x92\x77\x9a\xa2\x48\xe4\x5c\x9f\xd3\xd8\xed\xa1\x5c\x69\xc2\x23\xf0\x74\x69\x62\x65\x7d\x2d\x49\x35\xcc\xbf\xc7\x34\x5b\xd9\xb6\xf0\xd6\x26\x7a\x3f\xe4\xd4\xf3\x4b\xe0\xfa\x77\xda\xa9\x29\xc3\x75\xe0\xc2\xd9\x47\x5e\x34\xe7\x6e\x4b\xdc\x7f\xca\x5d\x55\xcd\xb9\x07\xd6\xf6\x5e\xe7\x59\x4e\x99\x1e\x53\x8e\x96\x1e\xa1\xfa\xc0\xdf\x91\xb1\x0b\x48\x7c\x28\xd2\x54\x74\xe5\x54\x57\x70\x99\x7a\x64\x12\xed\xef\xef\x3f\x29\xf2\x4a\xce\xe9\x75\xf3\xef\x79\xaa\x96\x9f\x79\xfb\xc9\x15\xee\x3d\xf3\xde\xde\xe9\xc3\x5c\x69\x91\xae\xef\xf2\x53\x14\xb5\x92\xb5\x10\xa2\x1c\x29\x2d\x93\xb2\x89\x0b\x4d\xca\xc1\x1d\x4d\xc6\x85\xcf\xff\x4e\xc8\xd3\x8b\x67\xd1\x61\x9c\xbc\x7c\xf5\x39\x7d\x93\x1d\xbf\xbf\xfa\x78\x7d\xf3\xc7\x97\x4f\xd3\x70\xd5\xbd\x5e\xfa\x1d\x59\x08\xb2\xa9\xd1\x54\x69\xdb\x62\x86\x51\xed\x38\x98\x26\x72\x06\x1d\x3c\x0f\xbd\x3e\x7b\x34\x38\x00\xd5\x34\xf6\x31\xa4\x71\xde\x77\xbd\x33\x20\x10\xd6\x04\x73\xa2\x6a\xc9\xe9\xca\x48\xb5\x63\x03\xe1\xd2\x32\x07\x6f\xb4\x62\x60\x34\xa5\xba\x2b\x39\x68\x8f\x1f\x15\xfe\x9f\x96\x51\x40\xad\x99\xb5\xe2\x84\xe4\xac\x5c\xaa\x91\x7f\xa1\x22\xc1\xf2\x34\x7c\x53\xe2\xd9\x2c\xad\x85\x1a\xb2\x8d\xf6\x32\x35\xb0\xee\xa1\xab\x22\xf5\x27\xcd\x8e\x24\x24\xd4\xbd\x9e\xba\x0d\xb6\xcc\x1a\x31\xcd\xf4\xcd\x87\xa2\xf6\xfb\x96\xa1\x58\xe9\xae\x96\x34\x3d\xce\x48\x74\xbb\x8d\x05\xae\x33\xc2\xe3\xce\xed\x0e\xea\x39\x15\xc2\xb5\x3e\x2a\x69\xf3\xdc\x94\xed\xd2\x31\x4c\xb4\xf6\x92\x73\x5d\xae\x35\x50\x5c\xcd\xb4\x7f\x90\x2f\x2b\x49\xee\xdc\xcf\xfd\xa0\x9a\xab\xf7\x07\xd5\x36\xa6\x5a\x7b\x8d\xbf\x2e\xc7\xaa\x57\x83\xd5\x0c\xf3\xbd\x2e\xdc\xe9\xf2\x04\xae\x88\x9b\x87\x8d\xa3\xba\x82\xfa\x8f\xa1\x74\x23\xc2\xfe\x9b\x10\x6c\x3c\x16\x19\x10\xbe\x15\x54\xeb\x62\xfb\xb7\xc2\xb2\xed\xbe\xfa\xec\x8d\x9f\x9c\x4f\xef\x7b\xdf\x7c\x56\x9d\x46\x42\x2b\xb9\xf9\x03\xd0\xe8\x1b\x92\x76\xdd\x9c\xfa\x7d\x91\xf3\x3b\x21\x60\x40\x6a\xc0\x4e\x12\x00\x64\xf7\xb0\xe8\x44\xcc\x79\xe7\x73\x73\xfc\xfa\xcf\x7d\xab\x50\xf3\x93\x2f\xc0\xb6\xa6\xf6\xbf\xba\x94\x46\xa0\x2b\xaa\xe7\x28\x63\x24\x82\xb9\x60\x45\x79\x67\x29\xdf\x8d\x44\x5a\xdf\x21\xe3\x37\xb9\xd2\x28\x12\x5c\x13\xca\x11\xd1\x88\x01\x51\x1a\x09\x0e\x61\x71\xf3\x3e\xe0\xeb\xe9\xa9\xba\x7f\x72\xb6\x98\x3e\x28\x3e\x16\xab\xdf\x5f\xbc\xa6\x8a\x5c\x23\x0e\x57\x8c\x72\x50\x61\x53\xdf\x72\x76\x83\x08\x63\xe2\xaa\x19\x5c\x18\xac\xe7\x80\x80\xc7\x41\x13\xcf\x4e\xce\x4e\x4f\x79\x61\x1f\xff\x75\x37\xf8\xc0\xb3\x53\xfc\x59\xec\xfc\x1d\x00\x00\xff\xff\x08\xb9\x61\x01\x71\x24\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": {schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

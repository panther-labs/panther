// Code generated for package logschema by go-bindata DO NOT EDIT. (@generated)
// sources:
// schema.json
package logschema

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x7b\x6f\x1b\x37\x12\xff\xdf\x9f\x82\x60\x7c\xc0\x5d\x22\x45\xce\xf9\x72\x45\x0c\x14\x45\xe2\x26\x4d\x80\x3c\x8c\xb8\x49\xd0\x58\xb2\x41\xef\xce\x4a\x4c\xb9\xe4\x96\xe4\xfa\x91\x40\xdf\xbd\xd8\xf7\x92\x4b\xae\x56\x96\x95\xa2\x69\xfe\x68\xb3\x22\x67\x86\x33\xc3\xdf\x0c\x87\x43\x7f\xd9\x41\x08\xef\xaa\x60\x01\x31\xc1\x07\x08\x2f\xb4\x4e\x0e\x26\x93\x4f\x4a\xf0\x71\x31\x7a\x5f\xc8\xf9\x24\x94\x24\xd2\xe3\xbd\x1f\x26\xc5\xd8\x1d\x3c\xca\xf8\x34\xd5\x0c\x32\xae\x23\xc2\xf5\x02\x24\x62\x62\x8e\x4a\x59\x39\xc1\x2e\x0d\x2b\xa1\xea\x60\x32\x91\x29\x4f\x0a\xca\xfb\x54\x94\xa2\xd4\x84\x89\xb9\x4a\x20\x98\x5c\xec\x95\x4c\x12\xa2\x8c\xeb\xce\x24\x84\x88\x72\xaa\xa9\xe0\xaa\xa4\x3e\x4e\x20\x28\xa8\x5a\x73\xf8\x00\x65\x66\x20\x84\x5b\x44\xd5\x58\xa6\xe6\x75\x92\x6b\x29\xce\x3f\x41\xa0\x73\xf6\x7c\x3c\x91\x22\x01\xa9\x29\xa8\x16\x35\x42\xf8\x02\xa4\xa2\x82\x1b\x83\x08\xe1\x40\x70\xa5\xf1\x01\xda\xab\x07\x97\xa3\x86\xa9\x76\xa1\xc1\x53\x2d\xad\xb4\xa4\x7c\x8e\x47\xed\xb9\x98\xf2\x97\xc0\xe7\x7a\x81\x0f\xd0\xbe\x31\x93\x10\xad\x41\x66\x0a\xe0\xd3\x93\xc7\xe3\x8f\xb3\xec\x7f\x64\xfc\x79\x6f\xfc\x68\x76\xef\xdf\xd3\xe9\xfd\xce\xe0\x7f\x7e\xda\xc5\x4e\xb5\x42\x50\x81\xa4\x89\x76\xd8\x63\xe9\xe6\x64\x97\x10\x81\x04\x1e\xc0\xbb\xb7\x2f\xd7\xb1\x2d\x12\x32\x26\x99\xb3\x70\x2a\xa9\x5b\x74\x42\xa4\x02\xe9\x13\x6a\xed\x55\xe1\x30\x72\x75\xd4\xde\xb2\x07\xb6\x3b\x7b\x66\x3d\x7b\x5d\x6c\xac\xba\xe8\x0c\x22\x84\x05\x87\x37\x19\x10\x4f\xac\x09\xd4\x21\xcd\xc9\xdd\xb0\x2d\xac\x3c\x3c\x7e\xff\x81\xea\xc5\x73\x20\x21\x48\xdc\xe1\x5e\x8e\x6e\x6d\x09\x91\x6a\xef\x2a\xd6\xc8\x6c\xa7\x47\x07\x1c\x11\xa5\x63\xa2\x83\x85\xcb\x35\x7d\x8a\x3c\x23\x4a\xbf\xca\x19\x7b\xe5\x4b\x98\xc3\xd5\xba\xb2\xdf\x66\x4c\x03\x84\x73\xa2\xe9\x05\xac\x2b\xfd\x75\xc1\xb5\xe3\x73\xda\xd2\x89\xe3\x88\x02\x0b\x6d\x54\x79\xd6\x29\x50\xfd\xac\xe0\xf0\xc4\x6b\x37\xad\x95\x53\x7d\xa1\x51\x66\x8c\xa3\x1e\x94\x77\x33\xc9\xee\x70\x07\x5d\x10\x96\x42\x9e\x57\xfd\xde\x31\x14\x22\x61\x98\xb3\x12\x66\xe8\x14\x11\xa6\x60\xc7\x66\xaf\x59\xb1\x84\x3f\x52\x2a\x21\x3b\x35\x4e\xea\x3c\x3c\xaa\x9d\x5c\x40\xb6\x24\xc7\x86\x37\x1d\xf9\x9e\x48\x49\xae\x9b\x74\x1f\x53\xfe\x42\x43\x6c\xe4\x06\x4c\xcb\x91\x56\xfa\x77\x7b\x20\xd7\xa0\xed\x81\xa5\xa1\x4b\x33\xdd\x52\x84\x30\x66\x65\x90\xe1\x1b\xda\xb3\x93\x9c\xc4\x4e\x6c\xfb\x12\x7a\x67\x77\x4c\x47\x7b\xe5\x9c\x0b\xc1\x80\xf0\x7e\x41\x25\xf1\x40\x1c\x65\xd4\xc7\x41\x07\x46\x96\x4c\xff\xa1\xb5\xda\x4e\x2f\x22\x0d\x68\xe5\x2e\x1c\x95\xa2\x66\xae\x48\x1c\x10\xcd\x8e\xa0\xa8\x96\x37\x81\xda\x10\xb6\xc0\xd1\x3d\x5e\x06\x2c\x59\x98\x6c\xad\xb9\x96\xd2\x05\xd8\x36\x91\x90\x87\xd5\x26\x02\x54\x40\x18\x91\x9b\x48\xd0\x34\xb6\x1d\xbf\x16\xbf\x84\x68\xc8\xbe\xd5\x68\x75\x24\x17\xab\xea\xc1\xc0\xd3\xd8\xd8\xcd\x6e\x5d\xd4\x0d\x74\x2b\x45\x21\x84\xb3\xc2\xbb\xfd\x9b\x72\x83\x3e\x62\x82\x18\x03\x2a\x26\x8c\x59\x44\xe7\x74\x6e\x8f\x94\x91\xdc\x1a\xca\x5c\xa8\x34\x89\x13\x6c\x96\x7b\xd8\xe9\x89\x16\x6a\x36\x28\xac\x1d\xb9\xa2\xae\xaa\x2b\x21\xdb\x3a\x63\xfb\x8f\x9a\x5c\x33\xdf\x39\xd3\x00\x7e\x5b\xb6\x17\x30\x70\x9a\x0e\x0c\x62\xe0\x7a\x98\xed\x3d\x19\x69\x85\xe1\xd5\x32\xa6\xe5\xad\x48\xbd\x65\xd3\xfb\x2e\x0f\x55\x28\x15\xe0\xaf\x41\xdf\x00\xbb\x0d\xfb\x2a\x64\x1a\x90\xcf\xd6\xb2\xdd\x32\xb8\xc9\xaf\xdb\xda\xeb\xbe\xeb\x16\xe5\x21\x0d\x88\x16\xd2\x5b\xfc\xd9\x09\xc3\x59\xc2\xf4\x20\xa4\x5e\xa1\x7d\x6c\x2e\x37\xf0\x58\x23\xf0\x46\x49\x92\x1a\xf9\x27\x14\x31\xa1\x46\x9a\x5a\x08\xa5\x8b\xc3\xba\x19\x4b\x25\x6b\xff\x8c\xc3\x87\x46\x46\x5c\x90\x07\xd6\xef\xff\x3e\xfc\xbf\x91\x74\x2f\xd5\x19\x91\xbc\x33\x14\x04\x22\xe5\xfa\x8c\x86\xf6\x0c\xe5\x4a\x13\x1e\x80\x63\x4a\x13\x23\xc3\x6b\x49\x3a\x64\xa9\x02\x69\x9b\x00\x31\xa1\x86\x11\x1c\xf4\x19\x09\x43\xe9\x4e\xbf\xf5\x79\xb7\x2d\x50\x36\xa7\x81\x1b\x97\xea\xe9\x05\x70\xfd\x2b\xed\x14\x9e\xfe\x62\x71\x69\x1d\x36\xcf\xaa\x96\x80\xc1\xee\xbe\x64\xaf\x2a\xf9\xec\xfb\x72\xd3\x89\x7a\x92\x52\xa6\xc7\x94\xa3\xda\x22\x54\xf6\x22\x3a\x3c\x66\x95\x89\x0f\x45\x1c\x8b\x2e\x9f\xea\x32\xd6\xf9\x49\x46\xc1\xfe\xfe\xfe\xa3\x2c\xf9\xa4\x9c\x5e\x55\xff\x9e\xc5\xaa\xfe\x4c\x9b\x4f\x9e\x7f\x06\x4c\xa4\x61\xc4\x88\x6c\xd7\x9d\xa8\x5b\x04\xdf\xdc\x05\x87\xa9\xd2\x22\x5e\xdf\x01\x8f\x51\xd0\x70\x96\x4c\x88\x72\xa4\xb4\x8c\xf2\x21\x2e\x34\xc9\x89\x3b\x92\x5a\x0d\xab\x7f\x9d\x90\xc7\xe7\x4f\x82\xc3\x30\x7a\xfe\xe2\x53\xfc\x2a\x39\x7e\x77\xf9\xe1\xea\xfa\xb7\xcf\x1f\x67\xbd\x35\xff\xcd\xcd\xfd\x45\x20\x46\xae\x45\xaa\x6f\xcf\xe2\x79\x2d\x72\x90\xc9\xa7\x05\xf1\x8f\xfe\x9b\xc8\x7a\x47\xd2\xc8\x08\x18\x33\x13\x54\x95\xeb\xb6\x12\x41\xab\x02\xb4\x42\x98\xc8\x39\x74\xc2\x77\x68\x7f\xf3\xc1\x60\x07\x14\xcb\x98\x57\xb3\xca\x78\x57\x33\x6d\x80\x23\x8c\x05\x16\x44\x95\x9c\xb3\x95\x9e\x6a\x68\x3d\xee\xd2\x32\x05\xa7\xb7\x42\x60\x34\xa6\xda\xdf\xdf\xec\xad\x7b\x46\x99\xfd\xd3\xdc\x0b\xa8\x51\xb3\x14\x1c\x91\x94\xe5\x5b\x35\x72\x6f\x54\x20\x58\x1a\xfb\xbb\x47\x8e\x02\xc2\xd5\x18\x41\x3d\x95\x45\x6f\x68\x7a\xb6\xdd\xd7\x3d\x53\xbf\xd3\xe4\x48\x42\x44\xed\x5e\xe0\x4d\xa0\x65\x1c\xb0\x89\xbe\x7e\x9f\x95\xc3\x5f\xd1\x13\x2b\xad\xd5\x92\xc6\xc7\x09\x09\x6e\x76\x8a\xc2\x55\x42\x78\xd8\xe9\x77\xa1\x9e\x7b\x32\x5c\xe9\xa3\x3c\x68\x9e\xb6\x79\xbb\xc1\xe8\x0f\xb3\xa6\xa1\xbc\x6e\xa4\x55\x40\x5c\x1d\x67\x7f\x61\xb4\xac\x0c\x71\xab\x63\xf9\x3d\xd0\xbe\x07\xda\x2d\x07\x5a\xf3\x60\xb2\x6e\x84\x15\xef\x33\xab\xe3\xcb\xf5\x8e\x73\x9b\xbb\xe3\xe9\x98\x57\x2f\x48\x47\x65\xa9\xf4\xcf\xc2\xe8\x46\xd1\xfa\x77\xc2\xef\x6b\xfb\xb1\xcd\xd1\x6a\x5f\x8d\x51\xc7\xa3\x86\xff\x85\xba\x47\x9b\xd6\x13\xe1\xb6\xc2\xa9\x2c\xfd\x7f\xce\xfc\xb7\xdd\x97\xba\xbd\xf1\xa3\xb3\xd9\x5d\xe7\x3b\xdd\xaa\xfb\x91\x0f\x6f\x9b\x3f\xda\x8d\xbe\x5e\x62\x59\x37\xed\x7f\x53\x09\xe4\x1b\x49\x12\x1e\xae\x01\xc1\xe9\x81\x63\xf7\x2a\x6b\x79\xcc\x7a\x99\xb5\x8f\xa1\xf5\x1f\x68\x57\x81\xe6\x7f\x2e\x07\x0f\x96\xd4\xfa\x2b\xaa\x5c\x41\x74\x49\xf5\x02\x25\x8c\x04\xb0\x10\x2c\x2b\x4d\x0d\xf2\xdd\x40\xc4\xe5\x8b\x00\x7e\x95\x2a\x8d\x02\xc1\x35\xa1\x1c\x11\x8d\x18\x10\xa5\x91\xe0\xe0\x67\x6f\xb7\x6a\xbe\x4c\xa7\xea\xee\xc9\xe9\x72\x76\x2f\xfb\x98\x4e\x97\xab\xdf\xd3\xd6\x36\x24\xef\xa2\xc0\x25\xa3\x1c\x94\xdf\x90\x37\x9c\x5d\x23\xc2\x98\xb8\xac\x88\x33\x73\xf4\x02\x10\xf0\xd0\x6b\xc0\xe9\xc9\xe9\x74\xca\x33\xed\xb9\xf1\xf7\x4f\xe5\x57\xd9\x3c\xd8\xc9\xfe\x5b\xee\xfc\x19\x00\x00\xff\xff\xd4\x9d\x9e\xb7\xea\x26\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": {schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

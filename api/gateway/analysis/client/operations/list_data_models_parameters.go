// Code generated by go-swagger; DO NOT EDIT.

package operations

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListDataModelsParams creates a new ListDataModelsParams object
// with the default values initialized.
func NewListDataModelsParams() *ListDataModelsParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(25)
		sortByDefault   = string("id")
		sortDirDefault  = string("ascending")
	)
	return &ListDataModelsParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,
		SortBy:   &sortByDefault,
		SortDir:  &sortDirDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListDataModelsParamsWithTimeout creates a new ListDataModelsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListDataModelsParamsWithTimeout(timeout time.Duration) *ListDataModelsParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(25)
		sortByDefault   = string("id")
		sortDirDefault  = string("ascending")
	)
	return &ListDataModelsParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,
		SortBy:   &sortByDefault,
		SortDir:  &sortDirDefault,

		timeout: timeout,
	}
}

// NewListDataModelsParamsWithContext creates a new ListDataModelsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListDataModelsParamsWithContext(ctx context.Context) *ListDataModelsParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(25)
		sortByDefault   = string("id")
		sortDirDefault  = string("ascending")
	)
	return &ListDataModelsParams{
		Page:     &pageDefault,
		PageSize: &pageSizeDefault,
		SortBy:   &sortByDefault,
		SortDir:  &sortDirDefault,

		Context: ctx,
	}
}

// NewListDataModelsParamsWithHTTPClient creates a new ListDataModelsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListDataModelsParamsWithHTTPClient(client *http.Client) *ListDataModelsParams {
	var (
		pageDefault     = int64(1)
		pageSizeDefault = int64(25)
		sortByDefault   = string("id")
		sortDirDefault  = string("ascending")
	)
	return &ListDataModelsParams{
		Page:       &pageDefault,
		PageSize:   &pageSizeDefault,
		SortBy:     &sortByDefault,
		SortDir:    &sortDirDefault,
		HTTPClient: client,
	}
}

/*ListDataModelsParams contains all the parameters to send to the API endpoint
for the list data models operation typically these are written to a http.Request
*/
type ListDataModelsParams struct {

	/*Enabled
	  Only include data models which are enabled or disabled

	*/
	Enabled *bool
	/*LogTypes
	  Only include data models which apply to one of these log types

	*/
	LogTypes []string
	/*NameContains
	  Only include data models whose ID contains this substring (case-insensitive)

	*/
	NameContains *string
	/*Page
	  Which page of results to retrieve

	*/
	Page *int64
	/*PageSize
	  Number of items in each page of results

	*/
	PageSize *int64
	/*SortBy
	  Name of the field to sort by

	*/
	SortBy *string
	/*SortDir
	  Sort direction

	*/
	SortDir *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list data models params
func (o *ListDataModelsParams) WithTimeout(timeout time.Duration) *ListDataModelsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list data models params
func (o *ListDataModelsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list data models params
func (o *ListDataModelsParams) WithContext(ctx context.Context) *ListDataModelsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list data models params
func (o *ListDataModelsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list data models params
func (o *ListDataModelsParams) WithHTTPClient(client *http.Client) *ListDataModelsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list data models params
func (o *ListDataModelsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnabled adds the enabled to the list data models params
func (o *ListDataModelsParams) WithEnabled(enabled *bool) *ListDataModelsParams {
	o.SetEnabled(enabled)
	return o
}

// SetEnabled adds the enabled to the list data models params
func (o *ListDataModelsParams) SetEnabled(enabled *bool) {
	o.Enabled = enabled
}

// WithLogTypes adds the logTypes to the list data models params
func (o *ListDataModelsParams) WithLogTypes(logTypes []string) *ListDataModelsParams {
	o.SetLogTypes(logTypes)
	return o
}

// SetLogTypes adds the logTypes to the list data models params
func (o *ListDataModelsParams) SetLogTypes(logTypes []string) {
	o.LogTypes = logTypes
}

// WithNameContains adds the nameContains to the list data models params
func (o *ListDataModelsParams) WithNameContains(nameContains *string) *ListDataModelsParams {
	o.SetNameContains(nameContains)
	return o
}

// SetNameContains adds the nameContains to the list data models params
func (o *ListDataModelsParams) SetNameContains(nameContains *string) {
	o.NameContains = nameContains
}

// WithPage adds the page to the list data models params
func (o *ListDataModelsParams) WithPage(page *int64) *ListDataModelsParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the list data models params
func (o *ListDataModelsParams) SetPage(page *int64) {
	o.Page = page
}

// WithPageSize adds the pageSize to the list data models params
func (o *ListDataModelsParams) WithPageSize(pageSize *int64) *ListDataModelsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list data models params
func (o *ListDataModelsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithSortBy adds the sortBy to the list data models params
func (o *ListDataModelsParams) WithSortBy(sortBy *string) *ListDataModelsParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list data models params
func (o *ListDataModelsParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortDir adds the sortDir to the list data models params
func (o *ListDataModelsParams) WithSortDir(sortDir *string) *ListDataModelsParams {
	o.SetSortDir(sortDir)
	return o
}

// SetSortDir adds the sortDir to the list data models params
func (o *ListDataModelsParams) SetSortDir(sortDir *string) {
	o.SortDir = sortDir
}

// WriteToRequest writes these params to a swagger request
func (o *ListDataModelsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Enabled != nil {

		// query param enabled
		var qrEnabled bool
		if o.Enabled != nil {
			qrEnabled = *o.Enabled
		}
		qEnabled := swag.FormatBool(qrEnabled)
		if qEnabled != "" {
			if err := r.SetQueryParam("enabled", qEnabled); err != nil {
				return err
			}
		}

	}

	valuesLogTypes := o.LogTypes

	joinedLogTypes := swag.JoinByFormat(valuesLogTypes, "csv")
	// query array param logTypes
	if err := r.SetQueryParam("logTypes", joinedLogTypes...); err != nil {
		return err
	}

	if o.NameContains != nil {

		// query param nameContains
		var qrNameContains string
		if o.NameContains != nil {
			qrNameContains = *o.NameContains
		}
		qNameContains := qrNameContains
		if qNameContains != "" {
			if err := r.SetQueryParam("nameContains", qNameContains); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int64
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt64(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string
		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {
			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}

	}

	if o.SortDir != nil {

		// query param sortDir
		var qrSortDir string
		if o.SortDir != nil {
			qrSortDir = *o.SortDir
		}
		qSortDir := qrSortDir
		if qSortDir != "" {
			if err := r.SetQueryParam("sortDir", qSortDir); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

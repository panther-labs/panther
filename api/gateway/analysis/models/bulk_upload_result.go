// Code generated by go-swagger; DO NOT EDIT.

// Panther is a scalable, powerful, cloud-native SIEM written in Golang/React.
// Copyright (C) 2020 Panther Labs Inc
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BulkUploadResult bulk upload result
//
// swagger:model BulkUploadResult
type BulkUploadResult struct {

	// modified policies
	// Required: true
	// Minimum: 0
	ModifiedPolicies *int64 `json:"modifiedPolicies"`

	// modified rules
	// Required: true
	// Minimum: 0
	ModifiedRules *int64 `json:"modifiedRules"`

	// new policies
	// Required: true
	// Minimum: 0
	NewPolicies *int64 `json:"newPolicies"`

	// new rules
	// Required: true
	// Minimum: 0
	NewRules *int64 `json:"newRules"`

	// total policies
	// Required: true
	// Minimum: 0
	TotalPolicies *int64 `json:"totalPolicies"`

	// total rules
	// Required: true
	// Minimum: 0
	TotalRules *int64 `json:"totalRules"`
}

// Validate validates this bulk upload result
func (m *BulkUploadResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModifiedPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewRules(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalRules(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BulkUploadResult) validateModifiedPolicies(formats strfmt.Registry) error {

	if err := validate.Required("modifiedPolicies", "body", m.ModifiedPolicies); err != nil {
		return err
	}

	if err := validate.MinimumInt("modifiedPolicies", "body", int64(*m.ModifiedPolicies), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *BulkUploadResult) validateModifiedRules(formats strfmt.Registry) error {

	if err := validate.Required("modifiedRules", "body", m.ModifiedRules); err != nil {
		return err
	}

	if err := validate.MinimumInt("modifiedRules", "body", int64(*m.ModifiedRules), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *BulkUploadResult) validateNewPolicies(formats strfmt.Registry) error {

	if err := validate.Required("newPolicies", "body", m.NewPolicies); err != nil {
		return err
	}

	if err := validate.MinimumInt("newPolicies", "body", int64(*m.NewPolicies), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *BulkUploadResult) validateNewRules(formats strfmt.Registry) error {

	if err := validate.Required("newRules", "body", m.NewRules); err != nil {
		return err
	}

	if err := validate.MinimumInt("newRules", "body", int64(*m.NewRules), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *BulkUploadResult) validateTotalPolicies(formats strfmt.Registry) error {

	if err := validate.Required("totalPolicies", "body", m.TotalPolicies); err != nil {
		return err
	}

	if err := validate.MinimumInt("totalPolicies", "body", int64(*m.TotalPolicies), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *BulkUploadResult) validateTotalRules(formats strfmt.Registry) error {

	if err := validate.Required("totalRules", "body", m.TotalRules); err != nil {
		return err
	}

	if err := validate.MinimumInt("totalRules", "body", int64(*m.TotalRules), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BulkUploadResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BulkUploadResult) UnmarshalBinary(b []byte) error {
	var res BulkUploadResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

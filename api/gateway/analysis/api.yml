# Panther is a Cloud-Native SIEM for the Modern Security Team.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

swagger: '2.0'
info:
  version: '1.0.0' # API version, not the SAR code version
  title: panther-analysis-api
  description: Panther Python policies/rules
  contact:
    name: Panther Labs
    url: https://runpanther.io/about
    email: support@runpanther.io

schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

# The name of the Lambda handler function that will process API requests
x-panther-lambda-handler: panther-analysis-api

parameters: # Parameters shared across multiple methods
  policyId:
    name: policyId
    in: query
    description: Unique ASCII policy identifier
    required: true
    type: string
    pattern: '[a-zA-Z0-9\-\. ]{1,200}'

  ruleId:
    name: ruleId
    in: query
    description: Unique ASCII rule identifier
    required: true
    type: string
    pattern: '[a-zA-Z0-9\-\. ]{1,200}'

  globalId:
    name: globalId
    in: query
    description: Unique ASCII global identifier
    required: true
    type: string
    pattern: '[a-zA-Z0-9\-\. ]{1,200}'

  dataModelId:
    name: dataModelId
    in: query
    description: Unique ASCII dataModel identifier
    required: true
    type: string
    pattern: '[a-zA-Z0-9\-\. ]{1,200}'

  type:
    name: type
    in: query
    description: Type of analysis logic to retrieve
    required: true
    type: string
    enum:
      - POLICY
      - RULE
      - GLOBAL

  versionId:
    name: versionId
    in: query
    description: The version of the analysis to retrieve
    type: string
    pattern: '[a-zA-Z\._0-9]{32}'

paths:
  /datamodel:
    # The UI datamodel detail shows all details for an individual user provided data model.
    #
    # Example: GET /datamodel? dataModelId=onelogin
    #
    # Response: {
    #     "body":                      "def mapping_method(event): return event.get('a field')",
    #     "createdAt":                 "2019-08-26T00:00:00.000Z",
    #     "createdBy":                 "5f54cf4a-ec56-44c2-83bc-8b742600f307",
    #     "description":               "This policy is always compliant",
    #     "enabled":                   true,
    #     "id":                        "OneLogin.DataModel",
    #     "lastModified":              "2019-08-26T00:00:00.000Z",
    #     "lastModifiedBy":            "5f54cf4a-ec56-44c2-83bc-8b742600f307",
    #     "logTypes":                  ["OneLogin.Events"],
    #     "mappings":                  [{"path":"ipAddr","name":"source_address"}],
    #     "versionId": "TsKejJ6GGi_KdH65g2iu9bcww8JxkkwI"
    # }
    get:
      operationId: GetDataModel
      summary: Get data model details
      parameters:
        - $ref: '#/parameters/dataModelId'
        - $ref: '#/parameters/versionId'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/DataModel'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        404:
          description: DataModel does not exist
        500:
          description: Internal server error

    # When users create a new dataModel, the frontend uses this endpoint.
    #
    # This is almost identical to updating a dataModel, except the dataModelId must not already exist.
    #
    # Example: (see ModifyDataModel)
    post:
      operationId: CreateDataModel
      summary: Create a new Data Model module
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateDataModel'
      responses:
        201:
          description: DataModel created successfully
          schema:
            $ref: '#/definitions/DataModel'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        409:
          description: DataModel with the given ID already exists
        500:
          description: Internal server error

  /global:
    # The UI global detail shows all details for an individual global.
    #
    # Example: GET /global? globalId=panther
    #
    # Response: {
    #     "body":                      "def policy(resource): return True",
    #     "createdAt":                 "2019-08-26T00:00:00.000Z",
    #     "createdBy":                 "5f54cf4a-ec56-44c2-83bc-8b742600f307",
    #     "description":               "This policy is always compliant",
    #     "id":                        "BucketEncryptionEnabled",
    #     "lastModified":              "2019-08-26T00:00:00.000Z",
    #     "lastModifiedBy":            "5f54cf4a-ec56-44c2-83bc-8b742600f307",
    #     "tags":                      [],
    #     "versionId": "TsKejJ6GGi_KdH65g2iu9bcww8JxkkwI"
    # }
    get:
      operationId: GetGlobal
      summary: Get global details
      parameters:
        - $ref: '#/parameters/globalId'
        - $ref: '#/parameters/versionId'

      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Global'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Global does not exist
        500:
          description: Internal server error

    # When users create a new global, the frontend uses this endpoint.
    #
    # This is almost identical to updating a global, except the globalId must not already exist.
    #
    # Example: (see ModifyGlobal)
    post:
      operationId: CreateGlobal
      summary: Create a new global module
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateGlobal'
      responses:
        201:
          description: Global created successfully
          schema:
            $ref: '#/definitions/Global'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Global with the given ID already exists
        500:
          description: Internal server error

  /policy:
    # The UI policy detail shows all details for an individual policy.
    #
    # Example: GET /policy ? policyId=BucketEncryptionEnabled
    #
    # Response: {
    #     "autoRemediationId":         "",
    #     "autoRemediationParameters": {},
    #     "body":                      "def policy(resource): return True",
    #     "complianceStatus":          "PASS",
    #     "createdAt":                 "2019-08-26T00:00:00.000Z",
    #     "createdBy":                 "5f54cf4a-ec56-44c2-83bc-8b742600f307",
    #     "description":               "This policy is always compliant",
    #     "outputIds":                 ["5f54cf4a-ec56-44c2-83bc-8b742600f307", "1f54cf4a-ec56-44c2-83bc-8b742600f307"],
    #     "displayName":               "My Test Policy",
    #     "enabled":                   true,
    #     "id":                        "BucketEncryptionEnabled",
    #     "lastModified":              "2019-08-26T00:00:00.000Z",
    #     "lastModifiedBy":            "5f54cf4a-ec56-44c2-83bc-8b742600f307",
    #     "reference":                 "https://example.com",
    #     "resourceTypes":             ["AWS.S3.Bucket"],
    #     "runbook":                   "No need to do anything",
    #     "severity":                  "INFO",
    #     "suppressions":              ["arn:aws:s3:::panther-public-*"],
    #     "tags":                      [],
    #     "tests": [
    #         {
    #             "expectedResult": true,
    #             "name": "TestTheFirst",
    #             "resource": {
    #                 "hello": "world"
    #             },
    #         }
    #     ],
    #     "versionId": "TsKejJ6GGi_KdH65g2iu9bcww8JxkkwI"
    # }
    get:
      operationId: GetPolicy
      summary: Get policy details
      parameters:
        - $ref: '#/parameters/policyId'
        - $ref: '#/parameters/versionId'

      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Policy'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Policy does not exist
        500:
          description: Internal server error

    # When users create a new policy, the frontend uses this endpoint.
    #
    # This is almost identical to updating a policy, except the policyId must not already exist.
    #
    # Example: (see ModifyPolicy)
    post:
      operationId: CreatePolicy
      summary: Create a new compliance policy
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdatePolicy'
      responses:
        201:
          description: Policy created successfully
          schema:
            $ref: '#/definitions/Policy'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Rule or policy with the given ID already exists
        500:
          description: Internal server error

  /rule:
    # Same as GetPolicy, but for a log analysis rule (which has slightly different parameters).
    get:
      operationId: GetRule
      summary: Get rule details
      parameters:
        - $ref: '#/parameters/ruleId'
        - $ref: '#/parameters/versionId'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Rule'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Rule does not exist
        500:
          description: Internal server error

    # Same as CreatePolicy, but for a log analysis rule.
    post:
      operationId: CreateRule
      summary: Create a new log analysis rule
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateRule'
      responses:
        201:
          description: Rule created successfully
          schema:
            $ref: '#/definitions/Rule'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        409:
          description: Rule or policy with the given ID already exists
        500:
          description: Internal server error

  /delete:
    # Request deletion for one or more policies/rules, optionally across organizations.
    #
    # Deleted policies are removed from Dynamo but old versions remain in S3.
    #
    # Example: POST /delete
    # {
    #     "policies": [
    #         {
    #             "id":    "MyTestPolicy",
    #         }
    #     ]
    # }
    post:
      operationId: DeletePolicies
      summary: Delete one or more policies/rules
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeletePolicies'
      responses:
        200:
          description: OK
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /global/delete:
    # Same as DeletePolicies, but for a global module
    post:
      operationId: DeleteGlobals
      summary: Delete one or more globals
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeletePolicies'
      responses:
        200:
          description: OK
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /enabled:
    # The backend resource-processor uses enabled policies to scan modified resources.
    #
    # Here, we assume all policies fit in the 6MB response limit (no paging required)
    # since only the fields we need for processing are returned in the response.
    #
    # TODO: add paging / merge into ListPolicies endpoint
    get:
      operationId: GetEnabledPolicies
      summary: List all enabled rules/policies/datamodels for a customer account for backend processing
      parameters:
        - $ref: '#/parameters/type'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/EnabledPolicies'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /list:
    # The frontend pages through the policies in a customer account.
    #
    # Example: GET /list ?
    #     complianceStatus=FAIL &
    #     nameContains=Encryption &
    #     enabled=true &
    #     hasRemediation=true &
    #     resourceTypes=AWS.S3.Bucket,AWS.KMS.Key
    #     severity=MEDIUM &
    #     tags=aws,panther &
    #     sortBy=lastModified
    #     sortDir=ascending
    #
    # Response: {
    #     "paging": {
    #         "thisPage":   1,
    #         "totalPages": 1,
    #         "totalItems": 1
    #     },
    #     "policies": [
    #         {
    #             "autoRemediationId": "some-fix",
    #             "complianceStatus":  "FAIL",
    #             "displayName":       "",
    #             "enabled":           true,
    #             "id":                "AWS.S3.BucketEncryption",
    #             "lastModified":      "2019-08-26T00:00:00.000Z",
    #             "resourceTypes":     ["AWS.KMS.Key", "AWS.S3.Bucket"],
    #             "severity":          "MEDIUM",
    #             "tags":              ["aws", "s3", "cis"]
    #         }
    #     ]
    # }
    get:
      operationId: ListPolicies
      summary: Page through policies in a customer's account
      parameters:
        # filtering
        - name: complianceStatus
          in: query
          description: Only include policies with a specific compliance status
          type: string
          enum: [ERROR, FAIL, PASS]
        - name: nameContains
          in: query
          description: Only include policies whose ID or display name contains this substring (case-insensitive)
          type: string
        - name: enabled
          in: query
          description: Only include policies which are enabled or disabled
          type: boolean
        - name: hasRemediation
          in: query
          description: Only include policies with or without auto-remediation enabled
          type: boolean
        - name: resourceTypes
          in: query
          description: Only include policies which apply to one of these resource types
          type: array
          collectionFormat: csv
          uniqueItems: true
          items:
            type: string
        - name: severity
          in: query
          description: Only include policies with this severity
          type: string
          enum: [INFO, LOW, MEDIUM, HIGH, CRITICAL]
        - name: tags
          in: query
          description: Only include policies with all of these tags (case-insensitive)
          type: array
          collectionFormat: csv
          uniqueItems: true
          items:
            type: string

        # sorting
        - name: sortBy
          in: query
          description: Name of the field to sort by
          type: string
          enum:
            - complianceStatus
            - enabled
            - id
            - lastModified
            - resourceTypes
            - severity
          default: severity
        - name: sortDir
          in: query
          description: Sort direction
          type: string
          enum: [ascending, descending]
          default: descending

        # paging
        - name: pageSize
          in: query
          description: Number of items in each page of results
          type: integer
          minimum: 1
          maximum: 1000
          default: 25
        - name: page
          in: query
          description: Which page of results to retrieve
          type: integer
          minimum: 1
          default: 1
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/PolicyList'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /suppress:
    # Suppress resource patterns across one or more policies
    #
    # Example: POST /suppress
    # {
    #     "policyIds": ["MyTestPolicy", "SomeOtherPolicy"],
    #     "resourcePatterns": ["arn:aws:s3:::panther-.*", "dev"]
    # }
    post:
      operationId: Suppress
      summary: Suppress resource patterns across one or more policies
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/Suppress'
      responses:
        200:
          description: OK
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /rule/list:
    # Same as ListPolicies, but for log analysis rules
    get:
      operationId: ListRules
      summary: Page through rules in a customer's account
      parameters:
        # filtering
        - name: nameContains
          in: query
          description: Only include rules whose ID or display name contains this substring (case-insensitive)
          type: string
        - name: enabled
          in: query
          description: Only include rules which are enabled or disabled
          type: boolean
        - name: logTypes
          in: query
          description: Only include rules which apply to one of these log types
          type: array
          collectionFormat: csv
          uniqueItems: true
          items:
            type: string
        - name: severity
          in: query
          description: Only include policies with this severity
          type: string
          enum: [INFO, LOW, MEDIUM, HIGH, CRITICAL]
        - name: tags
          in: query
          description: Only include policies with all of these tags (case-insensitive)
          type: array
          collectionFormat: csv
          uniqueItems: true
          items:
            type: string

        # sorting
        - name: sortBy
          in: query
          description: Name of the field to sort by
          type: string
          enum:
            - enabled
            - id
            - lastModified
            - logTypes
            - severity
          default: severity
        - name: sortDir
          in: query
          description: Sort direction
          type: string
          enum: [ascending, descending]
          default: ascending

        # paging
        - name: pageSize
          in: query
          description: Number of items in each page of results
          type: integer
          minimum: 1
          maximum: 1000
          default: 25
        - name: page
          in: query
          description: Which page of results to retrieve
          type: integer
          minimum: 1
          default: 1
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/RuleList'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /datamodel/list:
    # Same as ListPolicies, but for data models
    get:
      operationId: ListDataModels
      summary: Page through data models in a customer's account
      parameters:
        # filtering
        - name: nameContains
          in: query
          description: Only include data models whose ID contains this substring (case-insensitive)
          type: string
        - name: enabled
          in: query
          description: Only include data models which are enabled or disabled
          type: boolean
        - name: logTypes
          in: query
          description: Only include data models which apply to one of these log types
          type: array
          collectionFormat: csv
          uniqueItems: true
          items:
            type: string

        # sorting
        - name: sortBy
          in: query
          description: Name of the field to sort by
          type: string
          enum:
            - enabled
            - id
            - lastModified
            - logTypes
          default: id
        - name: sortDir
          in: query
          description: Sort direction
          type: string
          enum: [ascending, descending]
          default: ascending

        # paging
        - name: pageSize
          in: query
          description: Number of items in each page of results
          type: integer
          minimum: 1
          maximum: 1000
          default: 25
        - name: page
          in: query
          description: Which page of results to retrieve
          type: integer
          minimum: 1
          default: 1
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/DataModelList'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /global/list:
    # Same as ListPolicies, but for globals
    get:
      operationId: ListGlobals
      summary: Page through globals in a customer's account
      parameters:
        # sorting
        - name: sortDir
          in: query
          description: Sort direction
          type: string
          enum: [ascending, descending]
          default: ascending

        # paging
        - name: pageSize
          in: query
          description: Number of items in each page of results
          type: integer
          minimum: 1
          maximum: 1000
          default: 25
        - name: page
          in: query
          description: Which page of results to retrieve
          type: integer
          minimum: 1
          default: 1
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/GlobalList'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /update:
    # When users edit a policy, the frontend sends the changes to this endpoint.
    #
    # This is almost identical to creating a policy, except the policyId must already exist.
    # NOTE: we can't use PATCH because of a limitation in AppSync.
    #
    # Example: POST /update
    # {
    #     "body":     "def policy(resource): return False",
    #     "enabled":  false,
    #     "id":       "MyVeryExcellentPolicy",
    #     "severity": "MEDIUM",
    #     "userId":   "5f54cf4a-ec56-44c2-83bc-8b742600f307"
    # }
    #
    # Response: (see GetPolicy)
    post:
      operationId: ModifyPolicy
      summary: Modify an existing policy
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdatePolicy'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Policy'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Policy not found
        500:
          description: Internal server error

  /rule/update:
    # Same as UpdatePolicy, but for a log analysis rule
    post:
      operationId: ModifyRule
      summary: Modify an existing rule
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateRule'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Rule'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Rule not found
        500:
          description: Internal server error

  /rule/test:
    post:
      operationId: TestRule
      summary: Test a rule against a set of unit tests
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TestPolicy' # Reuse the input model since it is the same
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TestRuleResult'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /datamodel/update:
    # Same as UpdatePolicy, but for a dataModel module
    post:
      operationId: ModifyDataModel
      summary: Modify an existing Data Model
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateDataModel'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/DataModel'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        404:
          description: DataModel not found
        500:
          description: Internal server error

  /global/update:
    # Same as UpdatePolicy, but for a global module
    post:
      operationId: ModifyGlobal
      summary: Modify an existing global
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateGlobal'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Global'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        404:
          description: Global not found
        500:
          description: Internal server error

  /upload:
    # Upload base64-encoded zipfile contents with multiple policies/rules for a single org.
    #
    # Policies/Rules are either updated or replaced depending on whether their ID already exists.
    #
    # Example: POST /upload
    # {
    #     "data":   "... base64-encoded zipfile ...",
    #     "userId": "5f54cf4a-ec56-44c2-83bc-8b742600f307"
    # }
    #
    # Response: {
    #     "modifiedPolicies": 5,
    #     "modifiedRules":    0,
    #     "newPolicies":      5,
    #     "newRules":         1,
    #     "totalPolicies":    10,
    #     "totalRules":       3
    # }
    post:
      operationId: BulkUpload
      summary: Upload a zipfile containing a bundle of policies
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/BulkUpload'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/BulkUploadResult'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /policy/test:
    post:
      operationId: TestPolicy
      summary: Test a policy against a set of unit tests
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/TestPolicy'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/TestPolicyResult'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

definitions:
  Error:
    type: object
    properties:
      message:
        description: Error message
        type: string
    required:
      - message

  ##### Create/Update/Modify #####
  Policy:
    type: object
    properties:
      autoRemediationId:
        $ref: '#/definitions/autoRemediationId'
      autoRemediationParameters:
        $ref: '#/definitions/autoRemediationParameters'
      body:
        $ref: '#/definitions/body'
      complianceStatus:
        $ref: '#/definitions/complianceStatus'
      createdAt:
        $ref: '#/definitions/modifyTime'
      createdBy:
        $ref: '#/definitions/userId'
      description:
        $ref: '#/definitions/description'
      displayName:
        $ref: '#/definitions/displayName'
      enabled:
        $ref: '#/definitions/enabled'
      id:
        $ref: '#/definitions/id'
      lastModified:
        $ref: '#/definitions/modifyTime'
      lastModifiedBy:
        $ref: '#/definitions/userId'
      outputIds:
        $ref: '#/definitions/outputIds'
      reference:
        $ref: '#/definitions/reference'
      resourceTypes:
        $ref: '#/definitions/TypeSet'
      runbook:
        $ref: '#/definitions/runbook'
      severity:
        $ref: '#/definitions/severity'
      suppressions:
        $ref: '#/definitions/suppressions'
      tags:
        $ref: '#/definitions/tags'
      tests:
        $ref: '#/definitions/TestSuite'
      versionId:
        $ref: '#/definitions/versionId'
      reports:
        $ref: '#/definitions/reports'
    required:
      - autoRemediationId
      - autoRemediationParameters
      - body
      - complianceStatus
      - createdAt
      - createdBy
      - description
      - displayName
      - enabled
      - id
      - lastModified
      - lastModifiedBy
      - outputIds
      - reference
      - resourceTypes
      - runbook
      - severity
      - suppressions
      - tags
      - tests
      - versionId
      - reports

  TypeSet:
    description: List of resource/log types to which this policy applies
    type: array
    maxItems: 500
    uniqueItems: true
    items:
      type: string
      minLength: 1

  UnitTest:
    type: object
    properties:
      expectedResult:
        $ref: '#/definitions/testExpectedResult'
      name:
        $ref: '#/definitions/testName'
      resource:
        $ref: '#/definitions/testResource'
    required:
      - expectedResult
      - name
      - resource

  TestSuite:
    type: array
    items:
      $ref: '#/definitions/UnitTest'

  AnalysisType:
    type: string
    enum:
      - DATAMODEL
      - GLOBAL
      - POLICY
      - RULE

  UpdatePolicy:
    type: object
    properties:
      autoRemediationId:
        $ref: '#/definitions/autoRemediationId'
      autoRemediationParameters:
        $ref: '#/definitions/autoRemediationParameters'
      body:
        $ref: '#/definitions/body'
      description:
        $ref: '#/definitions/description'
      displayName:
        $ref: '#/definitions/displayName'
      enabled:
        $ref: '#/definitions/enabled'
      id:
        $ref: '#/definitions/id'
      outputIds:
        $ref: '#/definitions/outputIds'
      reference:
        $ref: '#/definitions/reference'
      resourceTypes:
        $ref: '#/definitions/TypeSet'
      runbook:
        $ref: '#/definitions/runbook'
      severity:
        $ref: '#/definitions/severity'
      suppressions:
        $ref: '#/definitions/suppressions'
      tags:
        $ref: '#/definitions/tags'
      tests:
        $ref: '#/definitions/TestSuite'
      userId:
        $ref: '#/definitions/userId'
    required:
      - body
      - enabled
      - id
      - severity
      - userId

  ##### DeletePolicies #####
  DeletePolicies:
    type: object
    properties:
      policies:
        type: array
        items:
          $ref: '#/definitions/DeleteEntry'
        minItems: 1
        maxItems: 1000 # max deletes in a single S3 DeleteObjects call
        uniqueItems: true
    required:
      - policies

  DeleteEntry:
    type: object
    properties:
      id:
        $ref: '#/definitions/id'
    required:
      - id

  ##### GetEnabledPolicies #####
  EnabledPolicies:
    type: object
    properties:
      policies:
        type: array
        items:
          $ref: '#/definitions/EnabledPolicy'
    required:
      - policies

  EnabledPolicy:
    type: object
    properties: # only the fields we need for backend processing
      body:
        $ref: '#/definitions/body'
      dedupPeriodMinutes:
        $ref: '#/definitions/dedupPeriodMinutes'
      id:
        $ref: '#/definitions/id'
      mappings:
        $ref: '#/definitions/DataModelMappings'
      outputIds:
        $ref: '#/definitions/outputIds'
      reports:
        $ref: '#/definitions/reports'
      resourceTypes:
        $ref: '#/definitions/TypeSet'
      severity:
        $ref: '#/definitions/severity'
      suppressions:
        $ref: '#/definitions/suppressions'
      tags:
        $ref: '#/definitions/tags'
      versionId:
        $ref: '#/definitions/versionId'

  ##### ListPolicies #####
  PolicyList:
    type: object
    properties:
      paging:
        $ref: '#/definitions/Paging'
      policies:
        type: array
        items:
          $ref: '#/definitions/PolicySummary'
    required:
      - paging
      - policies

  Paging:
    type: object
    properties:
      thisPage:
        type: integer
        minimum: 1
      totalPages:
        type: integer
        minimum: 1
      totalItems:
        type: integer
        minimum: 1
    required:
      - thisPage
      - totalPages
      - totalItems

  PolicySummary:
    type: object
    properties: # only the fields we need for the table in the UI
      autoRemediationId:
        $ref: '#/definitions/autoRemediationId'
      autoRemediationParameters:
        $ref: '#/definitions/autoRemediationParameters'
      complianceStatus:
        $ref: '#/definitions/complianceStatus'
      displayName:
        $ref: '#/definitions/displayName'
      enabled:
        $ref: '#/definitions/enabled'
      id:
        $ref: '#/definitions/id'
      lastModified:
        $ref: '#/definitions/modifyTime'
      resourceTypes:
        $ref: '#/definitions/TypeSet'
      severity:
        $ref: '#/definitions/severity'
      tags:
        $ref: '#/definitions/tags'
      suppressions:
        $ref: '#/definitions/suppressions'
      reports:
        $ref: '#/definitions/reports'
      threshold:
        $ref: '#/definitions/threshold' # not required because this is really for RuleSummaries
      outputIds:
        $ref: '#/definitions/outputIds'
    required:
      - autoRemediationId
      - autoRemediationParameters
      - complianceStatus
      - displayName
      - enabled
      - id
      - lastModified
      - resourceTypes
      - severity
      - tags
      - suppressions
      - reports
      - outputIds

  ##### BulkUpload #####
  BulkUpload:
    type: object
    properties:
      data:
        $ref: '#/definitions/base64zipfile'
      userId:
        $ref: '#/definitions/userId'
    required:
      - data
      - userId

  BulkUploadResult:
    type: object
    properties:
      totalPolicies:
        type: integer
        minimum: 0
      newPolicies:
        type: integer
        minimum: 0
      modifiedPolicies:
        type: integer
        minimum: 0
      totalRules:
        type: integer
        minimum: 0
      newRules:
        type: integer
        minimum: 0
      modifiedRules:
        type: integer
        minimum: 0
      totalGlobals:
        type: integer
        minimum: 0
      newGlobals:
        type: integer
        minimum: 0
      modifiedGlobals:
        type: integer
        minimum: 0
      totalDataModels:
        type: integer
        minimum: 0
      newDataModels:
        type: integer
        minimum: 0
      modifiedDataModels:
        type: integer
        minimum: 0
    required:
      - totalPolicies
      - newPolicies
      - modifiedPolicies
      - totalRules
      - newRules
      - modifiedRules
      - totalGlobals
      - newGlobals
      - modifiedGlobals
      - totalDataModels
      - newDataModels
      - modifiedDataModels

  ##### TestPolicy / TestRule #####
  TestPolicy:
    type: object
    properties:
      body:
        $ref: '#/definitions/body'
      resourceTypes:
        $ref: '#/definitions/TypeSet'
      tests:
        $ref: '#/definitions/TestSuite'
      analysisType:
        $ref: '#/definitions/AnalysisType'
    required:
      - body
      - resourceTypes
      - tests
      - analysisType

  TestPolicyResult:
    type: object
    properties:
      testSummary:
        $ref: '#/definitions/testSummary'
      testsPassed:
        $ref: '#/definitions/testsPassed'
      testsFailed:
        $ref: '#/definitions/testsFailed'
      testsErrored:
        $ref: '#/definitions/testsErrored'
    required:
      - testSummary
      - testsPassed
      - testsFailed
      - testsErrored

  TestRuleResult:
    type: object
    properties:
      testSummary:
        type: boolean
        description: True if all tests passed
      results:
        type: 'array'
        items:
          $ref: '#/definitions/ruleResult'

  ruleResult:
    # We already have a RuleResult struct with same fields as this model. The go-swagger extension below
    # could allow us to use it. However, it is not supported by the AWS API Gateway.
    #    x-go-type:
    #      import:
    #        package: 'github.com/panther-labs/panther/api/gateway/analysis'
    #      type: 'RuleResult'
    type: object
    properties:
      id:
        type: string
      testName:
        type: string
      ruleId:
        type: string
      passed:
        type: boolean
        description: True if the test returned the expected result. Always false if the result includes an error.
      errored:
        type: boolean
        description: True if the result includes an error.
      ruleOutput:
        type: boolean
      ruleError:
        type: string
      titleOutput:
        type: string
      titleError:
        type: string
      dedupOutput:
        type: string
      dedupError:
        type: string
      alertContextOutput:
        type: string
      alertContextError:
        type: string
      genericError:
        type: string
        description: An error produced before running any of the rule functions, like import or syntax error.

  ##### Suppress #####
  Suppress:
    type: object
    properties:
      policyIds:
        type: array
        items:
          $ref: '#/definitions/id'
        minItems: 1
      resourcePatterns:
        $ref: '#/definitions/suppressions'
    required:
      - policyIds
      - resourcePatterns

  ##### Create/Modify/Update DataModels #####
  DataModel:
    type: object
    properties:
      body:
        $ref: '#/definitions/body'
      createdAt:
        $ref: '#/definitions/modifyTime'
      createdBy:
        $ref: '#/definitions/userId'
      description:
        $ref: '#/definitions/description'
      displayName:
        $ref: '#/definitions/displayName'
      enabled:
        $ref: '#/definitions/enabled'
      id:
        $ref: '#/definitions/id'
      lastModified:
        $ref: '#/definitions/modifyTime'
      lastModifiedBy:
        $ref: '#/definitions/userId'
      logTypes:
        $ref: '#/definitions/TypeSet'
      mappings:
        $ref: '#/definitions/DataModelMappings'
      versionId:
        $ref: '#/definitions/versionId'
    required:
      # Note: body is optional for DataModel
      - createdAt
      - createdBy
      - enabled
      - id
      - lastModified
      - lastModifiedBy
      - logTypes
      - mappings
      - versionId

  UpdateDataModel:
    type: object
    properties:
      body:
        $ref: '#/definitions/body'
      description:
        $ref: '#/definitions/description'
      displayName:
        $ref: '#/definitions/displayName'
      enabled:
        $ref: '#/definitions/enabled'
      id:
        $ref: '#/definitions/id'
      logTypes:
        $ref: '#/definitions/TypeSet'
      mappings:
        $ref: '#/definitions/DataModelMappings'
      userId:
        $ref: '#/definitions/userId'
    required:
      - enabled
      - id
      - mappings
      - userId

  ##### Create/Modify/Update Globals #####
  Global:
    type: object
    properties:
      body:
        $ref: '#/definitions/body'
      createdAt:
        $ref: '#/definitions/modifyTime'
      createdBy:
        $ref: '#/definitions/userId'
      description:
        $ref: '#/definitions/description'
      id:
        $ref: '#/definitions/id'
      lastModified:
        $ref: '#/definitions/modifyTime'
      lastModifiedBy:
        $ref: '#/definitions/userId'
      tags:
        $ref: '#/definitions/tags'
      versionId:
        $ref: '#/definitions/versionId'
    required:
      - body
      - createdAt
      - createdBy
      - description
      - id
      - lastModified
      - lastModifiedBy
      - tags
      - versionId

  UpdateGlobal:
    type: object
    properties:
      body:
        $ref: '#/definitions/body'
      description:
        $ref: '#/definitions/description'
      id:
        $ref: '#/definitions/id'
      tags:
        $ref: '#/definitions/tags'
      userId:
        $ref: '#/definitions/userId'
    required:
      - body # is this needed if someone just wants to update the meta data?
      - id
      - userId

  ##### Create/Modify/Update Rules (Log Analysis) #####
  Rule:
    type: object
    properties:
      body:
        $ref: '#/definitions/body'
      createdAt:
        $ref: '#/definitions/modifyTime'
      createdBy:
        $ref: '#/definitions/userId'
      description:
        $ref: '#/definitions/description'
      displayName:
        $ref: '#/definitions/displayName'
      enabled:
        $ref: '#/definitions/enabled'
      id:
        $ref: '#/definitions/id'
      lastModified:
        $ref: '#/definitions/modifyTime'
      lastModifiedBy:
        $ref: '#/definitions/userId'
      logTypes:
        $ref: '#/definitions/TypeSet'
      outputIds:
        $ref: '#/definitions/outputIds'
      reference:
        $ref: '#/definitions/reference'
      runbook:
        $ref: '#/definitions/runbook'
      severity:
        $ref: '#/definitions/severity'
      tags:
        $ref: '#/definitions/tags'
      tests:
        $ref: '#/definitions/TestSuite'
      versionId:
        $ref: '#/definitions/versionId'
      dedupPeriodMinutes:
        $ref: '#/definitions/dedupPeriodMinutes'
      reports:
        $ref: '#/definitions/reports'
      threshold:
        $ref: '#/definitions/threshold'
    required:
      - body
      - createdAt
      - createdBy
      - description
      - displayName
      - enabled
      - id
      - lastModified
      - lastModifiedBy
      - logTypes
      - outputIds
      - reference
      - runbook
      - severity
      - tags
      - tests
      - versionId
      - dedupPeriodMinutes
      - reports
      - threshold

  UpdateRule:
    type: object
    properties:
      body:
        $ref: '#/definitions/body'
      description:
        $ref: '#/definitions/description'
      displayName:
        $ref: '#/definitions/displayName'
      enabled:
        $ref: '#/definitions/enabled'
      id:
        $ref: '#/definitions/id'
      logTypes:
        $ref: '#/definitions/TypeSet'
      outputIds:
        $ref: '#/definitions/outputIds'
      reference:
        $ref: '#/definitions/reference'
      runbook:
        $ref: '#/definitions/runbook'
      severity:
        $ref: '#/definitions/severity'
      tags:
        $ref: '#/definitions/tags'
      tests:
        $ref: '#/definitions/TestSuite'
      userId:
        $ref: '#/definitions/userId'
      dedupPeriodMinutes:
        $ref: '#/definitions/dedupPeriodMinutes'
      reports:
        $ref: '#/definitions/reports'
      threshold:
        $ref: '#/definitions/threshold'
    required:
      - body
      - enabled
      - id
      - severity
      - userId

  ##### ListRules #####
  RuleList:
    type: object
    properties:
      paging:
        $ref: '#/definitions/Paging'
      rules:
        type: array
        items:
          $ref: '#/definitions/RuleSummary'
    required:
      - paging
      - rules

  DataModelList:
    type: object
    properties:
      paging:
        $ref: '#/definitions/Paging'
      dataModels:
        type: array
        items:
          $ref: '#/definitions/DataModelSummary'
    required:
      - paging
      - dataModels

  DataModelSummary:
    type: object
    properties:
      id:
        $ref: '#/definitions/id'
      enabled:
        $ref: '#/definitions/enabled'
      lastModified:
        $ref: '#/definitions/modifyTime'
      logTypes:
        $ref: '#/definitions/TypeSet'

    required:
      - id
      - lastModified

  DataModelMapping:
    type: object
    properties:
      name:
        $ref: '#/definitions/dataModelName'
      path:
        $ref: '#/definitions/dataModelPath'
      method:
        $ref: '#/definitions/dataModelMethod'
    required:
      - name

  DataModelMappings:
    description: yml schema mappings
    type: array
    items:
      $ref: '#/definitions/DataModelMapping'

  GlobalList:
    type: object
    properties:
      paging:
        $ref: '#/definitions/Paging'
      globals:
        type: array
        items:
          $ref: '#/definitions/GlobalSummary'
    required:
      - paging
      - globals

  GlobalSummary:
    type: object
    properties: # only the fields we need for the table in the UI
      id:
        $ref: '#/definitions/id'
      lastModified:
        $ref: '#/definitions/modifyTime'
      tags:
        $ref: '#/definitions/tags'
    required:
      - id
      - lastModified
      - tags

  RuleSummary:
    type: object
    properties: # only the fields we need for the table in the UI
      displayName:
        $ref: '#/definitions/displayName'
      enabled:
        $ref: '#/definitions/enabled'
      id:
        $ref: '#/definitions/id'
      lastModified:
        $ref: '#/definitions/modifyTime'
      logTypes:
        $ref: '#/definitions/TypeSet'
      severity:
        $ref: '#/definitions/severity'
      tags:
        $ref: '#/definitions/tags'
      reports:
        $ref: '#/definitions/reports'
      threshold:
        $ref: '#/definitions/threshold'
      outputIds:
        $ref: '#/definitions/outputIds'
    required:
      - displayName
      - enabled
      - id
      - lastModified
      - logTypes
      - severity
      - tags
      - reports
      - threshold
      - outputIds

  ##### object properties #####
  autoRemediationId:
    description: When a resource fails the policy, trigger the remediation with this ID
    type: string
    maxLength: 200

  autoRemediationParameters:
    description: Configuration parameters passed to the remediation handler
    type: object
    additionalProperties:
      type: string
    maxProperties: 50

  base64zipfile:
    description: Base64-encoded zipfile with a policy bundle
    type: string
    # we don't use format: byte because it fails to unmarshal without double-encoding
    minLength: 10

  body:
    description: Python policy source code
    type: string
    minLength: 10
    maxLength: 1000000 # ~1 MB

  complianceStatus:
    description: Pass/fail compliance status
    type: string
    enum:
      - ERROR # Policy raised an exception when evaluating a resource
      - FAIL # Policy failed on at least one resource
      - PASS # Policy passed for all applicable resources

  dataModelMethod:
    description: method name used to map data in a DataModel
    type: string
    pattern: '[a-zA-Z0-9\-\. ]{1,200}'

  dataModelName:
    description: standardized field name used in DataModel
    type: string
    pattern: '[a-zA-Z0-9\-\. ]{1,200}'

  dataModelPath:
    description: path name used to map data in a DataModel
    type: string
    pattern: '[a-zA-Z0-9@\-\.\,\$\[\]\(\)\*\?]{1,200}' # support JSONPath

  dedupPeriodMinutes:
    description: The time in minutes for which we deduplicate events when generating alerts for log analysis
    type: integer
    minimum: 15
    maximum: 1440 # 1 day in minutes
    default: 60

  threshold:
    description: The threshold (number of events) that will have to be reached during the dedupPeriodMinutes in order for the rule to fire an alarm
    type: integer
    minimum: 1
    default: 1

  description:
    description: Summary of the policy and its purpose
    type: string
    maxLength: 5000

  displayName:
    description: Optional user-friendly policy name
    type: string
    maxLength: 200

  enabled:
    description: True if the policy is currently being evaluated
    type: boolean

  id:
    description: User-specified unique rule/policy ID
    type: string
    pattern: '[a-zA-Z0-9\-\. ]{1,200}'

  modifyTime:
    description: Policy modification timestamp
    type: string
    format: date-time

  outputIds:
    description: >
      A list of destinations IDs to send an alert that overrides the
      severity rating triggers set in the destination itself.
    type: array
    maxItems: 500
    uniqueItems: true
    items:
      type: string
      pattern: '[a-zA-Z0-9\-\. ]{1,200}'

  reference:
    description: External documentation motivating the need for this policy
    type: string
    maxLength: 5000

  reports:
    type: object
    additionalProperties:
      type: array
      items:
        type: string

  runbook:
    description: Internal documenation about what to do when a policy fails
    type: string

  severity:
    description: Policy severity
    type: string
    enum:
      - INFO
      - LOW
      - MEDIUM
      - HIGH
      - CRITICAL

  suppressions:
    description: >
      List of resource ID regexes that are excepted from this policy.
      The policy will still be evaluated, but failures will not trigger alerts nor remediations.
    type: array
    maxItems: 500
    uniqueItems: true
    items:
      type: string
      maxLength: 1000

  tags:
    description: List of tags to categorize the policy
    type: array
    maxItems: 500
    uniqueItems: true
    items:
      type: string
      maxLength: 200

  testExpectedResult:
    description: The expected outcome when running a unit test
    type: boolean

  testName:
    description: The name of a unit test
    type: string
    minLength: 1

  testResource:
    description: The resource (or log event) the unit test is running against
    type: string
    minLength: 2

  testSummary:
    description: True if all tests passed
    type: boolean

  testsPassed:
    description: List of names of tests that passed
    type: array
    items:
      type: string

  testsFailed:
    description: List of names of tests that failed
    type: array
    items:
      type: string

  testsErrored:
    description: List of names of tests that raised an error, along with their error message
    type: array
    items:
      $ref: '#/definitions/testErrorResult'

  testErrorResult:
    description: A combination of a test name and the error the test raised
    type: object
    properties:
      name:
        type: string
      errorMessage:
        type: string

  userId:
    description: Panther user ID that created or modified the policy
    type: string
    pattern: '[a-f0-9\-]{36}'

  versionId:
    description: Policy version ID
    type: string
    pattern: '[a-zA-Z\._0-9]{32}' # 32-character alphanumeric S3 object version

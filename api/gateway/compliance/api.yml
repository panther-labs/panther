# Panther is a Cloud-Native SIEM for the Modern Security Team.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

swagger: '2.0'
info:
  version: '1.0.0' # API version, not the SAR code version
  title: panther-compliance-api
  description: Track pass/fail state for every policy-resource pair
  contact:
    name: Panther Labs
    url: https://runpanther.io/about
    email: support@runpanther.io

schemes:
  - https
consumes:
  - application/json
produces:
  - application/json

# The name of the Lambda handler function that will process API requests
x-panther-lambda-handler: panther-compliance-api

parameters: # Common parameters shared across multiple methods
  policyId:
    name: policyId
    in: query
    description: URL-encoded panther policy ID
    required: true
    type: string
    maxLength: 200
  resourceId:
    name: resourceId
    in: query
    description: URL-encoded unique resource ID
    required: true
    type: string
    maxLength: 2000

  # paging
  pageSize:
    name: pageSize
    in: query
    description: Number of items in each page of results
    type: integer
    minimum: 0
    maximum: 1000
    default: 25
  page:
    name: page
    in: query
    description: Which page of results to retrieve
    type: integer
    minimum: 1
    default: 1

  # filtering
  severity:
    name: severity
    in: query
    description: Limit entries to those whose policies have this severity
    type: string
    enum: [LOW, INFO, MEDIUM, HIGH, CRITICAL]
  status:
    name: status
    in: query
    description: Limit entries to those with a specific compliance status
    type: string
    enum: [ERROR, FAIL, PASS]
  suppressed:
    name: suppressed
    in: query
    description: Limit entries to those which are/are not suppressed
    type: boolean

# TODO: deletion by policy, resource, or org
paths:
  /status:
    # The alert-processor verifies a resource is still failing a specific policy
    # before proceeding to deliver the remediation and/or alert.
    get:
      operationId: GetStatus
      summary: Get compliance status for a single policy/resource pair
      parameters:
        - $ref: '#/parameters/resourceId'
        - $ref: '#/parameters/policyId'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/ComplianceStatus'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        404:
          description: policy-resource pair not found
        500:
          description: Internal server error

    # The resource-processor analyzes each modified resource and posts the results here.
    post:
      operationId: SetStatus
      summary: Set the compliance status for a batch of resource/policy pairs
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/SetStatusBatch'
      responses:
        201:
          description: OK
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /delete:
    # The policy-api deletes statuses when a policy is disabled or deleted or no longer applies to a resource type, and
    # the resources-api deletes statuses when a resource is deleted.
    post:
      operationId: DeleteStatus
      summary: Delete the status associated with one or more policies or resources
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/DeleteStatusBatch'
      responses:
        200:
          description: OK
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /update:
    # The policy-api updates the relevant policy attributes here when they change (severity/suppressions).
    # For these updates, we don't need to re-scan the resources and can instead directly modify the compliance state.
    post:
      operationId: UpdateMetadata
      summary: Update
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/UpdateMetadata'
      responses:
        200:
          description: OK
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /describe-org:
    # The resources-api and policy-api load and cache all pass/fail information for each
    # org so they can filter and sort their respective lists.
    #
    # Results are sorted so that the top failing policies/resources are first:
    #   sort by # of CRITICAL failures, then # of HIGH failures, etc
    # Suppressed resources are not included
    #
    # TODO - handle response > 6MB - add paging or compression or upload to S3
    #
    #
    # Response: {  # Either 'policies' or 'resources' are returned, not both
    #     "policies": [
    #         {
    #             "id":       "AWS.S3.EncryptionEnabled",
    #             "status":   "ERROR|FAIL|PASS",
    #         }
    #     ],
    #     "resources": [
    #         {
    #             "id":     "arn:aws:s3:::my-bucket",
    #             "status": "ERROR|FAIL|PASS",
    #         }
    #     ]
    # }
    get:
      operationId: DescribeOrg
      summary: List pass/fail status for every policy and resource in the org
      parameters:
        - name: type
          in: query
          description: Which type of information is returned
          required: true
          type: string
          enum: [policy, resource]
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/EntireOrg'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /describe-policy:
    # The UI policy detail page shows pass/fail counts and pages through affected resources.
    #
    # Example: GET /describe-policy?
    #     policyId=AWS.S3.BucketEncryptionEnabled & // can be url-encoded
    #     page=1 & pageSize=25 & suppressed=false
    #
    # Response: {
    #     "items": [  // TODO: add sorting options
    #         {
    #             "errorMessage":   "ZeroDivisionError",
    #             "lastUpdated":    "2019-08-22T00:00:00Z",
    #             "policyId":       "AWS.S3.BucketEncryptionEnabled",
    #             "policySeverity": "MEDIUM",
    #             "resourceId":     "arn:aws:s3:::my-bucket",
    #             "resourceType":   "AWS.S3.Bucket",
    #             "status":         "ERROR",
    #             "suppressed":     false,
    #             "integrationId":  "ff76ea2a-5afc-4005-9e77-61a32c4c365f"
    #         },
    #         {
    #             "lastUpdated":    "2019-08-22T00:00:00Z",
    #             "policyId":       "AWS.S3.BucketEncryptionEnabled",
    #             "policySeverity": "MEDIUM",
    #             "resourceId":     "arn:aws:s3:::my-other-bucket",
    #             "resourceType":   "AWS.S3.Bucket",
    #             "status":         "PASS",
    #             "suppressed":     false,
    #             "integrationId":  "ff76ea2a-5afc-4005-9e77-61a32c4c365f"
    #         }
    #     ],
    #     "paging": {
    #         "thisPage":   1,
    #         "totalPages": 15,
    #         "totalItems": 123
    #     },
    #     "status": "ERROR",
    #     "totals": {  // global totals - will be the same regardless of paging/filtering
    #         "active":     {"error": 0, "fail": 4, "pass": 10},
    #         "suppressed": {"error": 0, "fail": 4, "pass": 5}
    #     }
    # }
    get:
      operationId: DescribePolicy
      summary: Page through resources affected by a specific policy
      parameters:
        - $ref: '#/parameters/policyId'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/status'
        - $ref: '#/parameters/suppressed'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/PolicyResourceDetail'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /describe-resource:
    # The UI resource detail page shows pass/fail counts and pages through applied policies.
    #
    # Example: GET /describe-resource?
    #     resourceId=arn%3Aaws%3As3%3A%3A%3Amy-bucket & // url-encoded
    #     pageSize=25 & page=1 & severity=MEDIUM
    #
    # Response: {
    #     "items": [  // TODO: add sorting options
    #         {
    #             "lastUpdated":    "2019-08-22T00:00:00Z",
    #             "policyId":       "AWS.S3.BucketEncryptionEnabled",
    #             "policySeverity": "MEDIUM",
    #             "resourceId":     "arn:aws:s3:::my-bucket",
    #             "resourceType":   "AWS.S3.Bucket",
    #             "status":         "PASS"
    #         },
    #         {
    #             "lastUpdated":    "2019-08-22T00:00:00Z",
    #             "policyId":       "AWS.S3.BlockPublicAccess",
    #             "policySeverity": "MEDIUM",
    #             "resourceId":     "arn:aws:s3:::my-bucket",
    #             "resourceType":   "AWS.S3.Bucket",
    #             "status":         "PASS"
    #         }
    #     ],
    #     "paging": {
    #         "thisPage":   1,
    #         "totalPages": 15,
    #         "totalItems": 123
    #     },
    #     "status": "PASS",
    #     "totals": {  // global totals - will be the same regardless of paging/filtering
    #         "active":     {"error": 0, "fail": 4, "pass": 10},
    #         "suppressed": {"error": 0, "fail": 4, "pass": 5}
    #     }
    # }
    get:
      operationId: DescribeResource
      summary: Page through policies which affect this resource
      parameters:
        - $ref: '#/parameters/resourceId'
        - $ref: '#/parameters/page'
        - $ref: '#/parameters/pageSize'
        - $ref: '#/parameters/severity'
        - $ref: '#/parameters/status'
        - $ref: '#/parameters/suppressed'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/PolicyResourceDetail'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

  /org-overview:
    # The UI dashboard shows:
    #   - failing policy counts by severity
    #   - total number of failing resources
    #   - top failing policies/resources
    #
    # Example: GET /org-overview?
    #     limitTopFailing=10
    #
    # Note that errors can generally be considered failures - it means the Python policy failed
    # to analyze a specific resource. Suppressions are not included in any counts.
    #
    # Response: {
    #     "appliedPolicies": {
    #         // This ONLY includes enabled policies which scanned at least one resource.
    #         "info":     {"error": 0, "fail": 10, "pass": 0},
    #         "low":      {"error": 0, "fail": 10, "pass": 0},
    #         "medium":   {"error": 0, "fail": 10, "pass": 0},
    #         "high":     {"error": 0, "fail": 10, "pass": 0},
    #         "critical": {"error": 0, "fail": 10, "pass": 0}
    #     },
    #     "scannedResources": {
    #         // This ONLY includes resources with at least one applicable policy.
    #         // There could be more resources in the account (e.g. with no policies for them).
    #         "byType": [
    #             {
    #                 "count": {"error": 0, "fail": 5, "pass": 1},
    #                 "type": "AWS.S3.Bucket"
    #             }
    #         ],
    #     },
    #     "topFailingPolicies": [
    #         {
    #             "count":     {"error": 1, "fail": 10, "pass": 0},
    #             "id":        "AWS.S3.BlockPublicAccess",
    #             "severity":  "CRITICAL",
    #         },
    #         {
    #             "count":    {"error": 0, "fail": 20, "pass": 9},
    #             "id":       "AWS.S3.VersioningEnabled",
    #             "severity": "MEDIUM",
    #         }
    #     ],
    #     "topFailingResources": [
    #         {
    #             "count": {
    #                 "info":     {"error": 0, "fail": 10, "pass": 0},
    #                 "low":      {"error": 0, "fail": 10, "pass": 0},
    #                 "medium":   {"error": 0, "fail": 10, "pass": 0},
    #                 "high":     {"error": 0, "fail": 10, "pass": 0},
    #                 "critical": {"error": 0, "fail": 10, "pass": 0}
    #             }
    #             "id":     "arn:aws:s3:::my-bucket",
    #             "type":   "AWS.S3.Bucket"
    #         }
    #     ]
    # }
    get:
      operationId: GetOrgOverview
      summary: Get account totals and top failing policies / resources
      parameters:
        - name: limitTopFailing
          in: query
          description: Upper bound on the number of top failing resources and policies returned
          type: integer
          default: 10
          minimum: 1
          maximum: 500
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/OrgSummary'
        400:
          description: Bad request
          schema:
            $ref: '#/definitions/Error'
        500:
          description: Internal server error

definitions:
  Error:
    type: object
    properties:
      message:
        description: Error message
        type: string
    required:
      - message

  ComplianceStatus:
    type: object
    properties:
      errorMessage:
        $ref: '#/definitions/errorMessage'
      expiresAt:
        $ref: '#/definitions/expiresAt'
      integrationId:
        $ref: '#/definitions/integrationId'
      lastUpdated:
        $ref: '#/definitions/lastUpdated'
      policyId:
        $ref: '#/definitions/policyId'
      policySeverity:
        $ref: '#/definitions/policySeverity'
      resourceId:
        $ref: '#/definitions/resourceId'
      resourceType:
        $ref: '#/definitions/resourceType'
      status:
        $ref: '#/definitions/status'
      suppressed:
        $ref: '#/definitions/suppressed'
    required:
      - expiresAt
      - integrationId
      - lastUpdated
      - policyId
      - policySeverity
      - resourceId
      - resourceType
      - status
      - suppressed

  ##### SetStatus #####
  SetStatusBatch:
    type: object
    properties:
      entries:
        type: array
        items:
          $ref: '#/definitions/SetStatus'
        minItems: 1
    required:
      - entries

  SetStatus:
    properties:
      errorMessage:
        $ref: '#/definitions/errorMessage'
      policyId:
        $ref: '#/definitions/policyId'
      policySeverity:
        $ref: '#/definitions/policySeverity'
      resourceId:
        $ref: '#/definitions/resourceId'
      resourceType:
        $ref: '#/definitions/resourceType'
      status:
        $ref: '#/definitions/status'
      suppressed:
        $ref: '#/definitions/suppressed'
      integrationId:
        $ref: '#/definitions/integrationId'
    required:
      - policyId
      - policySeverity
      - resourceId
      - resourceType
      - status
      - suppressed
      - integrationId

  ##### DeleteStatus #####
  DeleteStatusBatch:
    type: object
    properties:
      entries:
        type: array
        items:
          $ref: '#/definitions/DeleteStatus'
        minItems: 1
    required:
      - entries

  DeleteStatus:
    properties:
      policy:
        $ref: '#/definitions/DeletePolicy'
      resource:
        $ref: '#/definitions/DeleteResource'

  DeletePolicy:
    properties:
      id:
        $ref: '#/definitions/policyId'
      resourceTypes:
        type: array
        description: Only delete entries with these specific resource types
        items:
          type: string
    required:
      - id

  DeleteResource:
    properties:
      id:
        $ref: '#/definitions/resourceId'
    required:
      - id

  ##### UpdateMetadata #####
  UpdateMetadata:
    type: object
    properties:
      policyId:
        $ref: '#/definitions/policyId'
      severity:
        $ref: '#/definitions/policySeverity'
      suppressions:
        $ref: '#/definitions/IgnoreSet'
    required:
      - policyId
      - severity

  IgnoreSet:
    type: array
    description: Resource glob patterns which should be suppressed
    items:
      type: string

  ##### DescribeOrg #####
  EntireOrg:
    type: object
    properties:
      policies:
        type: array
        items:
          $ref: '#/definitions/ItemSummary'
      resources:
        type: array
        items:
          $ref: '#/definitions/ItemSummary'
    required:
      - policies
      - resources

  ItemSummary:
    description: Summary of a single policy or resource compliance status
    type: object
    properties:
      id:
        type: string
      status:
        $ref: '#/definitions/status'
    required:
      - id
      - status

  ##### DescribePolicy and DescribeResource #####
  PolicyResourceDetail:
    type: object
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/ComplianceStatus'
      paging:
        $ref: '#/definitions/Paging'
      status:
        $ref: '#/definitions/status'
      totals:
        $ref: '#/definitions/ActiveSuppressCount'
    required:
      - items
      - paging
      - status
      - totals

  Paging:
    type: object
    properties:
      thisPage:
        type: integer
        minimum: 1
      totalPages:
        type: integer
        minimum: 1
      totalItems:
        type: integer
        minimum: 1
    required:
      - thisPage
      - totalPages
      - totalItems

  ActiveSuppressCount:
    type: object
    properties:
      active:
        $ref: '#/definitions/StatusCount'
      suppressed:
        $ref: '#/definitions/StatusCount'
    required:
      - active
      - suppressed

  StatusCount:
    type: object
    properties:
      error:
        type: integer
        minimum: 0
      fail:
        type: integer
        minimum: 0
      pass:
        type: integer
        minimum: 0

  ##### GetOrgOverview #####
  OrgSummary:
    type: object
    properties:
      appliedPolicies:
        $ref: '#/definitions/StatusCountBySeverity'
      scannedResources:
        $ref: '#/definitions/ScannedResources'
      topFailingPolicies:
        type: array
        items:
          $ref: '#/definitions/PolicySummary'
      topFailingResources:
        type: array
        items:
          $ref: '#/definitions/ResourceSummary'
    required:
      - appliedPolicies
      - scannedResources
      - topFailingPolicies
      - topFailingResources

  StatusCountBySeverity:
    type: object
    properties:
      info:
        $ref: '#/definitions/StatusCount'
      low:
        $ref: '#/definitions/StatusCount'
      medium:
        $ref: '#/definitions/StatusCount'
      high:
        $ref: '#/definitions/StatusCount'
      critical:
        $ref: '#/definitions/StatusCount'

  ScannedResources:
    type: object
    properties:
      byType:
        type: array
        items:
          $ref: '#/definitions/ResourceOfType'
    required:
      - byType

  ResourceOfType:
    type: object
    properties:
      count:
        $ref: '#/definitions/StatusCount'
      type:
        $ref: '#/definitions/resourceType'
    required:
      - count
      - type

  PolicySummary:
    description: Summary of a single policy compliance status
    type: object
    properties:
      count:
        $ref: '#/definitions/StatusCount'
      id:
        $ref: '#/definitions/policyId'
      severity:
        $ref: '#/definitions/policySeverity'
    required:
      - count
      - id
      - severity

  ResourceSummary:
    description: Summary of a single resource compliance status
    type: object
    properties:
      count:
        $ref: '#/definitions/StatusCountBySeverity'
      id:
        $ref: '#/definitions/resourceId'
      type:
        $ref: '#/definitions/resourceType'
    required:
      - count
      - id
      - type

  ##### object properties #####
  errorMessage:
    description: Error message when policy was applied to this resource
    type: string

  expiresAt:
    description: Dynamo TTL - unix time when the status will be automatically cleared
    type: number
    format: int64

  integrationId:
    description: IntegrationID where the resource was discovered
    type: string
    pattern: '[a-f0-9\-]{36}'

  lastUpdated:
    description: When the compliance state was last updated in the Panther database
    type: string
    format: date-time

  policyId:
    description: Panther policy ID, unique within each customer's account
    type: string
    maxLength: 200

  policySeverity:
    description: Policy severity
    type: string
    enum:
      - INFO
      - LOW
      - MEDIUM
      - HIGH
      - CRITICAL

  resourceId:
    description: Globally unique resource ID
    type: string
    maxLength: 2000

  resourceType:
    description: Resource type
    type: string
    maxLength: 200

  status:
    description: >
      Compliance status for one or more policy/resource pairs.
      A list has the collective status ERROR or FAIL if any of them individually error or fail.
    type: string
    enum:
      - ERROR # there was an error trying to apply the policy to at least one resource
      - FAIL # no errors, but there was at least one failed resource
      - PASS # policy is fully compliant - no errors nor failures

  suppressed:
    description: >
      True if this resource is ignored/suppressed by this specific policy.
      Suppressed resources are still analyzed and reported, but do not trigger alerts/remediations.
    type: boolean

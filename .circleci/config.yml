version: 2.1

# The images that jobs can have
executors:
  panther-buildpack:
    docker:
      - image: pantherlabs/panther-buildpack:1.8.0

# Command definitions which can be re-used across multiple jobs
commands:
  restore_bin_cache:
    steps:
      - restore_cache:
          name: 'Restore cache: .setup binaries'
          keys:
            - &bin_cache_key setup8-{{ checksum "tools/mage/setup/setup.go" }}

  restore_go_cache:
    steps:
      - restore_cache:
          name: 'Restore cache: go modules'
          keys:
            - &go_cache_key gomod8-{{ checksum "go.mod" }}

  restore_npm_cache:
    steps:
      - restore_cache:
          name: 'Restore cache: npm'
          keys:
            - &npm_cache_key npm8-{{ checksum "package-lock.json" }}

  restore_pip_cache:
    steps:
      - restore_cache:
          name: 'Restore cache: python env'
          keys:
            - &pip_cache_key venv8-{{ checksum "requirements.txt" }}

  save_caches:
    steps:
      - save_cache:
          name: 'Save cache: .setup binaries'
          key: *bin_cache_key
          paths:
            - .setup/golangci-lint
            - .setup/swagger
            - .setup/terraform
      - save_cache:
          name: 'Save cache: go modules'
          key: *go_cache_key
          paths:
            - /go/bin/goimports
            - /go/pkg/mod
      - save_cache:
          name: 'Save cache: npm'
          key: *npm_cache_key
          paths:
            - node_modules
      - save_cache:
          name: 'Save cache: python env'
          key: *pip_cache_key
          paths:
            - .setup/venv

  autofmt:
    steps:
      - run:
          # Generate source files, fmt the repo, and commit any resulting changes.
          # If a new commit is pushed, CircleCI will immediately restart the workflow.
          #
          # This will not run on the master branch, and to prevent a feedback loop it will also not
          # run if the last commit that triggered this build was authored by the bot.
          name: Autofmt
          command: |
            if [[ "$CIRCLE_BRANCH" = "master" ]]; then
                echo "master branch: skipping autofmt"
                exit 0
            fi

            if [[ "`git log -1 --pretty=format:'%an'`" == "panther-bot" ]]; then
                echo "panther-bot made the last commit: skipping autofmt"
                exit 0
            fi

            /tmp/panther/magebin build:api build:cfn fmt
            git config --global user.email "github-service-account@runpanther.io"
            git config --global user.name "panther-bot"
            git add -A .
            git commit -m "mage build:api build:cfn fmt" || true
            git push origin $CIRCLE_BRANCH

jobs:
  setup:
    # Install dependencies, compile the mage binary, and autofmt.
    # Subsequent jobs can load libraries from the cache and mage from workspace storage.
    executor: panther-buildpack
    resource_class: large
    steps:
      - checkout
      - restore_bin_cache
      - restore_go_cache
      - restore_npm_cache
      - restore_pip_cache
      - run:
          # This is the only time 'mage' is invoked directly in CI
          name: Compile mage binary
          command: mage -compile /tmp/panther/magebin
      - run:
          # "mage setup" will have no effect unless new dependencies have been introduced.
          name: Install new dependencies
          command: /tmp/panther/magebin -v setup
      - save_caches
      - autofmt
      - persist_to_workspace:
          root: /tmp/panther
          paths:
            - magebin

  test_cfn:
    docker:
      - image: cimg/python3.7 # points to latest patch release, 3.7.X
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/panther
      - restore_bin_cache # Terraform
      - restore_pip_cache # cfn-lint
      - run:
          name: mage test:cfn
          command: /tmp/panther/magebin test:cfn

  test_go:
    docker:
      - image: cimg/go:1.15 # points to latest patch release, 1.15.X
    resource_class: xlarge
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/panther
      - restore_bin_cache # golangci-lint
      - restore_go_cache
      - restore_pip_cache # cfn-flip
      - run:
          name: mage test:go
          command: /tmp/panther/magebin test:go

  test_python:
    docker:
      - image: cimg/python3.7 # points to latest patch release, 3.7.X
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/panther
      - restore_pip_cache
      - run:
          name: mage test:python
          command: /tmp/panther/magebin test:python

  test_web:
    docker:
      - image: cimg/node:12.18 # points to latest patch release, 12.18.X
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: /tmp/panther
      - restore_npm_cache
      - run:
          name: mage test:web
          command: /tmp/panther/magebin test:web

  npm_audit:
    docker:
      - image: cimg/node:12.18 # points to latest patch release, 12.18.X
    resource_class: small
    steps:
      - checkout
      - run:
          name: Audit NPM packages
          command: npm audit --production # does not require 'npm install'

  bundlesize:
    docker:
      - image: cimg/node:12.18 # points to latest patch release, 12.18.X
    steps:
      - checkout
      - restore_npm_cache
      - run:
          name: Check bundle size
          command: npm run bundlesize

  # Upload dependency metadata to FOSSA, analyze offline
  fossa_upload:
    docker:
      - image: cimg/base:2020.06
    resource_class: small
    steps:
      - checkout
      - run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | bash
      - run:
          command: fossa # generate config file, run dependency analysis, and upload metadata to FOSSA

workflows:
  version: 2
  pipeline:
    jobs:
      - npm_audit
      - setup
      - test_cfn:
          requires:
            - setup
      - test_go:
          requires:
            - setup
      - test_python:
          requires:
            - setup
      - test_web:
          requires:
            - setup
      - bundlesize:
          requires:
            - setup
      - fossa_upload # TODO: only enable on master
#      - fossa_upload:
#          filters:
#            branches:
#              only: master

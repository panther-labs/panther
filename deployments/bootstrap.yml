# Panther is a scalable, powerful, cloud-native SIEM written in Golang/React.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Description: The very first Panther stack - static resources which don't require S3 for deployment

# This stack has resources which take a long time or have generated IDs that we need.
# The idea is to build such resources as early as possible to maximize parallelism later.
#
# Since this is the very first stack, it must be < 51,200 bytes and not contain any
# code source or nested stacks (which require packaging in S3).
#
# This stack includes:
#   - All S3 buckets
#   - All KMS keys
#   - All web networking
#   - The cognito user pool and appsync API

Parameters:
  # Required
  CertificateArn:
    Type: String
    Description: The ARN of the TLS certificate that is going to be used by the ALB listener

  # Optional
  LogSubscriptionPrincipals:
    Type: CommaDelimitedList
    Description: The list of Principal ARNs to allow read access to the ProcessedDataBucket and subscribe access to ProcessedDataTopicArn
  EnableS3AccessLogs:
    Type: String
    Description: Enable S3 access logging for all Panther buckets.
    AllowedValues: [true, false]
    Default: true
  AccessLogsBucket:
    Type: String
    Description: Optional external bucket for storing S3 access logs. If not specified, the Panther audit bucket is used.
    Default: ''
  CloudWatchLogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    Default: 365
  CustomDomain:
    Type: String
    Description: The FQDN that will be used by the web application (defaults to autogenerated ALB URL)
    Default: ''
  TracingMode:
    Type: String
    Description: Enable XRay tracing on GraphQL queries & mutations
    Default: ''

Mappings:
  SubnetConfig:
    VPC:
      CIDR: 10.0.0.0/24
    PublicOne:
      CIDR: 10.0.0.0/26
    PublicTwo:
      CIDR: 10.0.0.64/26

  # OMG, I can't believe they make people do this ...
  ELBAccounts: # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
    us-east-1:
      ARN: arn:aws:iam::127311923021:root
    us-east-2:
      ARN: arn:aws:iam::033677994240:root
    us-west-1:
      ARN: arn:aws:iam::027434742980:root
    us-west-2:
      ARN: arn:aws:iam::797873946194:root
    ca-central-1:
      ARN: arn:aws:iam::985666609251:root
    eu-central-1:
      ARN: arn:aws:iam::054676820928:root
    eu-west-1:
      ARN: arn:aws:iam::156460612806:root
    eu-west-2:
      ARN: arn:aws:iam::652711504416:root
    eu-west-3:
      ARN: arn:aws:iam::009996457667:root
    eu-north-1:
      ARN: arn:aws:iam::897822967062:root
    ap-east-1:
      ARN: arn:aws:iam::754344448648:root
    ap-northeast-1:
      ARN: arn:aws:iam::582318560864:root
    ap-northeast-2:
      ARN: arn:aws:iam::600734575887:root
    ap-southeast-1:
      ARN: arn:aws:iam::383597477331:root
    ap-southeast-2:
      ARN: arn:aws:iam::114774131450:root
    ap-south-1:
      ARN: arn:aws:iam::718504428378:root
    me-south-1:
      ARN: arn:aws:iam::076674570225:root
    sa-east-1:
      ARN: arn:aws:iam::507241528517:root
    us-gov-west-1:
      ARN: arn:aws:iam::048591011584:root
    us-gov-east-1:
      ARN: arn:aws:iam::190560391635:root
    cn-north-1:
      ARN: arn:aws:iam::638102146993:root
    cn-northwest-1:
      ARN: arn:aws:iam::037604701340:root

Conditions:
  ConfigureLogSubscriptions: !Not [!Equals [!Select [0, !Ref LogSubscriptionPrincipals], '']]
  EnableAccessLogs: !Equals [!Ref EnableS3AccessLogs, true]
  ExternalAccessLogs: !Not [!Equals [!Ref AccessLogsBucket, '']]
  TracingEnabled: !Not [!Equals [!Ref TracingMode, '']]
  UseCustomDomain: !Not [!Equals [!Ref CustomDomain, '']]

Resources:
  ########## S3 Buckets ##########
  AuditLogs: # Panther self-auditing: S3 access logs, flow logs, etc
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          # Keep access logs for 1 year, permanently delete 30 days after they expire
          - ExpirationInDays: 365
            NoncurrentVersionExpirationInDays: 30
            Status: Enabled
      LoggingConfiguration: !If
        - EnableAccessLogs
        - DestinationBucketName:
            !If [ExternalAccessLogs, !Ref AccessLogsBucket, !Ref 'AWS::NoValue']
          LogFilePrefix: !If
            - ExternalAccessLogs
            - !Sub panther-source-${AWS::AccountId}-${AWS::Region}/
            - self/
        - !Ref AWS::NoValue
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  AuditLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy

    # This resource needs to be delayed slightly. If the bucket policy is created right after the
    # bucket itself is created, the stack will sometimes fail with:
    #
    #     A conflicting conditional operation is currently in progress against this resource.
    #
    # This seems to be caused by the PublicAccessBlockConfiguration not fully taking effect before
    # trying to set the bucket policy. An easy fix is to just delay this resource until some
    # networking setup has completed, it doesn't particularly matter which resource this depends on,
    # as long as it happens later in the stack creation.
    DependsOn: PublicRoute

    Properties:
      Bucket: !Ref AuditLogs
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: VPCFlowAclCheck
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub arn:aws:s3:::${AuditLogs}
          - Sid: VPCFlowWrite
            Effect: Allow
            Principal:
              Service: delivery.logs.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${AuditLogs}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
          - Sid: CloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub arn:aws:s3:::${AuditLogs}
          - Sid: CloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${AuditLogs}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                's3:x-amz-acl': bucket-owner-full-control
          - Sid: ALBWrite
            Effect: Allow # https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-access-logs.html#access-logging-bucket-permissions
            Principal:
              AWS: !FindInMap [ELBAccounts, !Ref 'AWS::Region', ARN]
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${AuditLogs}/AWSLogs/${AWS::AccountId}/*
          - Sid: GuardDutyBucketLocation
            Effect: Allow
            Principal:
              Service: guardduty.amazonaws.com
            Action: s3:GetBucketLocation
            Resource: !Sub arn:aws:s3:::${AuditLogs}
          - Sid: GuardDutyWrite
            Effect: Allow
            Principal:
              Service: guardduty.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${AuditLogs}/*

  Source: # Staging bucket for CloudFormation to upload templates, Lambda source, etc
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          # Once a stack is deployed, its resources in S3 can be safely removed.
          - ExpirationInDays: 90
            Status: Enabled
      LoggingConfiguration: !If
        - EnableAccessLogs
        - DestinationBucketName: !If [ExternalAccessLogs, !Ref AccessLogsBucket, !Ref AuditLogs]
          LogFilePrefix: !Sub panther-source-${AWS::AccountId}-${AWS::Region}/
        - !Ref AWS::NoValue
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  AnalysisVersions: # analysis-api stores old python rule/policy versions here
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - NoncurrentVersionExpirationInDays: 365
            Status: Enabled
      LoggingConfiguration: !If
        - EnableAccessLogs
        - DestinationBucketName: !If [ExternalAccessLogs, !Ref AccessLogsBucket, !Ref AuditLogs]
          LogFilePrefix: !Sub panther-analysis-versions-${AWS::AccountId}-${AWS::Region}/
        - !Ref AWS::NoValue
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  ProcessedData: # processed security logs
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LoggingConfiguration: !If
        - EnableAccessLogs
        - DestinationBucketName: !If [ExternalAccessLogs, !Ref AccessLogsBucket, !Ref AuditLogs]
          LogFilePrefix: !Sub panther-processed-data-${AWS::AccountId}-${AWS::Region}/
        - !Ref AWS::NoValue
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  ProcessedDataPolicy: # read access on processed data bucket for log subscriptions
    Condition: ConfigureLogSubscriptions
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref ProcessedData
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ReadBucket
            Effect: Allow
            Principal:
              AWS: !Ref LogSubscriptionPrincipals
            Action: s3:ListBucket
            Resource: !Sub arn:aws:s3:::${ProcessedData}
          - Sid: ReadLogData
            Effect: Allow
            Principal:
              AWS: !Ref LogSubscriptionPrincipals
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Sub arn:aws:s3:::${ProcessedData}/logs/*
          - Sid: ReadRuleData
            Effect: Allow
            Principal:
              AWS: !Ref LogSubscriptionPrincipals
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
            Resource: !Sub arn:aws:s3:::${ProcessedData}/rules/*

  AthenaResults: # athena query results
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 30
            Status: Enabled
      LoggingConfiguration: !If
        - EnableAccessLogs
        - DestinationBucketName: !If [ExternalAccessLogs, !Ref AccessLogsBucket, !Ref AuditLogs]
          LogFilePrefix: !Sub panther-athena-results-${AWS::AccountId}-${AWS::Region}/
        - !Ref AWS::NoValue
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled

  ########## Cognito ##########
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true
        InviteMessageTemplate:
          EmailSubject: Welcome to Panther!
          EmailMessage: !Sub
            - |
              <br />Welcome to Panther! We're very excited to have you on board!
              <br />
              <br />To get started, sign in to your <a href="https://${PantherHost}/sign-in">Panther dashboard</a> with the following temporary credentials:
              <br />
              <br />* Username: {username}
              <br />* Password: {####}
              <br />
              <br />Need help, or have questions? Just email us at support@runpanther.io, we'd love to help.
              <br />
              <br />Yours truly,
              <br />Panther - https://runpanther.io
              <br />
              <br /><small>Copyright © 2020 Panther Labs Inc. All rights reserved.</small>
            - PantherHost:
                !If [UseCustomDomain, !Ref CustomDomain, !GetAtt PublicLoadBalancer.DNSName]
      AutoVerifiedAttributes:
        - email
      LambdaConfig:
        CustomMessage: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-users-api
      Policies:
        PasswordPolicy:
          MinimumLength: 12
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - AttributeDataType: String
          Mutable: true
          Name: email
          Required: true
        - AttributeDataType: String
          Mutable: true
          Name: given_name
        - AttributeDataType: String
          Mutable: true
          Name: family_name
      UsernameAttributes:
        - email
      UserPoolName: panther-users

  AppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: Panther
      GenerateSecret: false
      RefreshTokenValidity: 1
      UserPoolId: !Ref UserPool
      WriteAttributes:
        - email
        - given_name
        - family_name

  ########## ECR + ECS ##########
  PantherWebImageRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: panther-web
      LifecyclePolicy:
        RegistryId: !Ref AWS::AccountId
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Makes sure to keep only the last 10 images that have been uploaded",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 10
                },
                "action": { "type": "expire" }
              }
            ]
          }

  WebApplicationCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: panther-web-cluster

  ########## Networking ##########
  # A VPC that will be used by our stack's security group, added to our web-service
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !FindInMap [SubnetConfig, VPC, CIDR]

  # We define a public subnet so that we can access our web server from a public IP. The empty
  # string in !GetAZs is equivalent to AWS::Region
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, PublicOne, CIDR]
      MapPublicIpOnLaunch: true

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [1, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: !FindInMap [SubnetConfig, PublicTwo, CIDR]
      MapPublicIpOnLaunch: true

  # The lines below setup networking resources for the public subnets. Containers in the public
  # subnets have public IP addresses and the routing table sends network traffic via the IG.
  InternetGateway:
    Type: AWS::EC2::InternetGateway

  # Attach the public Internet Gateway to our VPC
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Define a route table in order to map & route IP addresses
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  # Because we have a public VPC, we need to map 0.0.0.0/0 through an Internet Gateway in order
  # to be out there in the network
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Associate the route table that we have created (with the mapping right above) to our public
  # subnets in order to be used by it
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  # Panther monitors itself, the AuditLogsBucket is processed by the log processor
  FlowLogs:
    Type: AWS::EC2::FlowLog
    DependsOn: AuditLogsBucketPolicy
    Properties:
      LogDestination: !Sub arn:aws:s3:::${AuditLogs}
      LogDestinationType: s3
      ResourceId: !Ref VPC
      ResourceType: VPC
      TrafficType: ALL

  # Public load balancer, hosted in public subnets that is accessible
  # to the public, and is intended to route traffic to one or more public
  # facing services. This is used for accepting traffic from the public
  # internet and directing it to public facing microservices
  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: web-lb
      GroupDescription: Access to the public facing load balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        # Allow access to ALB from anywhere on the internet. If you want to restrict access to the
        # load balancer from specific IPs, add your own network CIDRs.
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          ToPort: 80
          IpProtocol: tcp
        - CidrIp: 0.0.0.0/0
          FromPort: 443
          ToPort: 443
          IpProtocol: tcp

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn: AuditLogsBucketPolicy
    Properties:
      Name: web
      # <cfndoc>
      # The load balancer associated with the Panther UI.
      #
      # Failure Impact
      # * The Panther user interface will not be available.
      # </cfndoc>
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket
          Value: !Ref AuditLogs
      Subnets:
        - !Ref PublicSubnetOne
        - !Ref PublicSubnetTwo
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup

  # A target group is connected to a network or application load balancer, so it can automatically
  # distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: panther-web
      HealthCheckProtocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /healthcheck
      HealthCheckTimeoutSeconds: 6
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds # Instantly deregister draining targets since we have 200% max capacity
          Value: '0'
      TargetType: ip
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC

  # Adds the networking stack to a security group and exposes the necessary TCP ports that allow
  # our server to communicate with the outside world.
  WebApplicationServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: panther-web-container
      GroupDescription: Access to the Fargate containers
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup
      VpcId: !Ref VPC

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref WebApplicationServerSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup

  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 443
      Protocol: HTTPS

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '*'
      ListenerArn: !Ref PublicLoadBalancerListener
      Priority: 1

  ########## Appsync ##########
  AppsyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Appsync service role which invokes API lambdas and gateways and writes CloudWatch logs
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: appsync.amazonaws.com
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs
      Policies:
        - PolicyName: InvokeLegacyApis
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-*-api
        - PolicyName: InvokeGatewayApis
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: execute-api:Invoke
                Resource: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:*

  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: panther-graphql-api
      # <cfndoc>
      # This is the GraphQL endpoint for the Panther UI.
      #
      # Failure Impact
      # * The Panther user interface will show errors.
      # </cfndoc>
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        AwsRegion: !Ref AWS::Region
        UserPoolId: !Ref UserPool
        DefaultAction: ALLOW
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppsyncServiceRole.Arn
        FieldLogLevel: ALL
      XrayEnabled: !If [TracingEnabled, True, !Ref 'AWS::NoValue']

  AppsyncLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/appsync/apis/${GraphQLApi.ApiId}
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  ########## KMS ##########
  # KMS keys take ~2 mins to create, we build all of them here at the same time
  QueueEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Encryption key for all panther SQS queues
      EnableKeyRotation: true
      KeyPolicy:
        # Allow account root user to administer key (required)
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Resource: '*'

  QueueEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/panther-sqs
      TargetKeyId: !Ref QueueEncryptionKey

  OutputsEncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: alias/panther-alert-outputs
      TargetKeyId: !Ref OutputsEncryptionKey

  OutputsEncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: Encrypts Panther's alert output configuration
      EnableKeyRotation: true
      KeyPolicy:
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'

  ########## SNS ##########
  ProcessedDataNotifications:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: panther-processed-data-notifications
      # <cfndoc>
      # This topic triggers the log analysis flow
      # </cfndoc>
      KmsMasterKeyId: !Ref QueueEncryptionKey

  ProcessedDataNotificationsTopicPolicy: # allow SNS subscriptions for log subscriptions
    Condition: ConfigureLogSubscriptions
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref ProcessedDataNotifications
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ReadTopic
            Effect: Allow
            Principal:
              AWS: !Ref LogSubscriptionPrincipals
            Action: sns:Subscribe
            Resource: !Ref ProcessedDataNotifications

Outputs:
  # S3
  AnalysisVersionsBucket:
    Description: S3 bucket name for analysis-api versioning
    Value: !Ref AnalysisVersions
  AthenaResultsBucket:
    Description: S3 bucket name for Athena results
    Value: !Ref AthenaResults
  AuditLogsBucket:
    Description: S3 bucket name for Panther audit logs (includes s3 access, alb, vpc)
    Value: !Ref AuditLogs
  ProcessedDataBucket:
    Description: S3 bucket name for processed log data
    Value: !Ref ProcessedData
  SourceBucket:
    Description: S3 bucket name for Panther CloudFormation packaging
    Value: !Ref Source

  # Networking + elb
  CertificateArn:
    Description: The ARN of the TLS certificate used by the ALB listener
    Value: !Ref CertificateArn
  SubnetOneId:
    Description: Public subnet one
    Value: !Ref PublicSubnetOne
  SubnetTwoId:
    Description: Public subnet two
    Value: !Ref PublicSubnetTwo
  LoadBalancerFullName:
    Description: Web load balancer full resource name
    Value: !GetAtt PublicLoadBalancer.LoadBalancerFullName
  LoadBalancerTargetGroup:
    Description: Web load balancer distribution target group ARN
    Value: !Ref TargetGroup
  LoadBalancerUrl:
    Description: Panther URL - application load balancer or custom domain
    Value: !If [UseCustomDomain, !Ref CustomDomain, !GetAtt PublicLoadBalancer.DNSName]
  WebSecurityGroup:
    Description: Public web app security group
    Value: !Ref WebApplicationServerSecurityGroup

  # ECR
  ImageRegistry:
    Description: Docker image registry which stores web app images
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.${AWS::URLSuffix}/${PantherWebImageRepository}'

  # Appsync
  AppsyncServiceRoleArn:
    Description: Appsync IAM role for logs and resolvers
    Value: !GetAtt AppsyncServiceRole.Arn
  GraphQLApiEndpoint:
    Description: The URL to the Appsync GraphQL Endpoint
    Value: !GetAtt GraphQLApi.GraphQLUrl
  GraphQLApiId:
    Description: The id of the Appsync GraphQL Endpoint
    Value: !GetAtt GraphQLApi.ApiId

  # Cognito
  UserPoolId:
    Description: Cognito user pool ID
    Value: !Ref UserPool
  AppClientId:
    Description: Cognito user pool client ID
    Value: !Ref AppClient

  # KMS
  OutputsEncryptionKeyId:
    Description: KMS key for encrypting Panther alert outputs
    Value: !Ref OutputsEncryptionKey
  QueueEncryptionKeyId:
    Description: KMS key for encrypting Panther SQS queues
    Value: !Ref QueueEncryptionKey

  # SNS
  ProcessedDataTopicArn:
    Description: SNS topic ARN for processed log data notifications
    Value: !Ref ProcessedDataNotifications

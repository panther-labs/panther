# Panther is a scalable, powerful, cloud-native SIEM written in Golang/React.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Resources datastore and API

Parameters:
  CloudWatchLogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    Default: 365
  Debug:
    Type: String
    Description: Toggle debug logging
    Default: false
    AllowedValues: [true, false]
  LayerVersionArns:
    Type: CommaDelimitedList
    Description: List of base LayerVersion ARNs to attach to every Lambda function
    Default: ''
  TracingMode:
    Type: String
    Description: Enable XRay tracing on Lambda and API Gateway
    AllowedValues: ['', Active, PassThrough]
    Default: ''

  AnalysisApiId:
    Type: String
    Description: API Gateway for analysis-api
  ComplianceApiId:
    Type: String
    Description: API Gateway for compliance-api
  PythonLayerArn:
    Type: String
    Description: Python Lambda layer with pip libraries for analysis
  SQSKeyId:
    Type: String
    Description: KMS key ID for SQS encryption

Conditions:
  AttachBaseLayers: !Not [!Equals [!Join ['', !Ref LayerVersionArns], '']]
  TracingEnabled: !Not [!Equals ['', !Ref TracingMode]]

Resources:
  ##### API Gateway #####
  GatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody: api/gateway/resources/api.yml
      EndpointConfiguration: REGIONAL
      Name: panther-resources-api
      StageName: v1 # NOTE: sam also builds a stage called "Stage"
      TracingEnabled: !If [TracingEnabled, true, false]

  GatewayInvocationPermission: # allow API gateway to invoke the Lambda function
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref HandlerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${GatewayApi}/*

  ##### API Lambda Handler #####
  HandlerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../bin/internal/compliance/resources_api/main
      Description: Resources API
      Environment:
        Variables:
          COMPLIANCE_API_HOST: !Sub '${ComplianceApiId}.execute-api.${AWS::Region}.${AWS::URLSuffix}'
          COMPLIANCE_API_PATH: v1
          DEBUG: !Ref Debug
          RESOURCES_QUEUE_URL: !Ref InputQueue
          RESOURCES_TABLE: !Ref ResourcesTable
      FunctionName: panther-resources-api
      Handler: main
      Layers: !If [AttachBaseLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      MemorySize: 512
      Runtime: go1.x
      Timeout: 120
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Policies:
        - Id: AccessComplianceApi
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: execute-api:Invoke
              Resource:
                - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ComplianceApiId}/v1/GET/describe-org
                - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ComplianceApiId}/v1/POST/delete
        - Id: DynamoManageItems
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:*Item
              Resource: !GetAtt ResourcesTable.Arn
        - Id: PublishToResourceQueue
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
                - sqs:SendMessageBatch
              Resource: !GetAtt InputQueue.Arn
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey
              Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${SQSKeyId}

  HandlerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-resources-api
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  ResourcesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: panther-resources
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification:
        SSEEnabled: True
      TimeToLiveSpecification: # Deleted resources are expired after 30 days
        AttributeName: expiresAt
        Enabled: true

  ##### Resource Queue #####
  InputQueue:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: !Ref SQSKeyId
      MessageRetentionPeriod: 86400 # 24 hours
      QueueName: panther-resources
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 10
      VisibilityTimeout: 180 # Should match lambda

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 # Max duration - 14 days
      QueueName: panther-resources-dlq
      VisibilityTimeout: 60

  ##### Resource Processor #####
  QueueProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-resource-processor
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  QueueProcessorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../bin/internal/compliance/resource_processor/main
      Description: Scans recently modified resources
      Environment:
        Variables:
          ALERT_QUEUE_URL: !Sub https://sqs.${AWS::Region}.${AWS::URLSuffix}/${AWS::AccountId}/panther-alert-processor-queue
          DEBUG: !Ref Debug
          ANALYSIS_API_HOST: !Sub '${AnalysisApiId}.execute-api.${AWS::Region}.${AWS::URLSuffix}'
          ANALYSIS_API_PATH: v1
          POLICY_ENGINE: panther-policy-engine
          COMPLIANCE_API_HOST: !Sub '${ComplianceApiId}.execute-api.${AWS::Region}.${AWS::URLSuffix}'
          COMPLIANCE_API_PATH: v1
          RESOURCE_API_HOST: !Sub '${GatewayApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}'
          RESOURCE_API_PATH: v1
      Events:
        Queue:
          Type: SQS
          Properties:
            BatchSize: 10 # Maximum batch size
            Queue: !GetAtt InputQueue.Arn
      FunctionName: panther-resource-processor
      Handler: main
      Layers: !If [AttachBaseLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      MemorySize: 256
      Runtime: go1.x
      Timeout: 180
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Policies:
        - Id: SendAndReceiveSqsMessages
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ReceiveMessage
              Resource: !GetAtt InputQueue.Arn
            - Effect: Allow
              Action:
                - sqs:SendMessage
                - sqs:SendMessageBatch
              Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:panther-alert-processor-queue
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey
              Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${SQSKeyId}
        - Id: InvokePantherAPIs
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-policy-engine
            - Effect: Allow
              Action: execute-api:Invoke
              Resource: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${GatewayApi}/v1/GET/list
            - Effect: Allow
              Action: execute-api:Invoke
              Resource: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${AnalysisApiId}/v1/GET/enabled
            - Effect: Allow
              Action: execute-api:Invoke
              Resource:
                - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ComplianceApiId}/v1/GET/status
                - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ComplianceApiId}/v1/POST/status

  ##### Python Engine #####
  EngineFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../../internal/compliance/policy_engine
      Description: Python Policy Engine
      FunctionName: panther-policy-engine
      Handler: src.main.lambda_handler
      MemorySize: 512
      Layers: !If
        - AttachBaseLayers
        - !Split # CFN doesn't have list append, so convert to/from CSV string to prepend base layers
          - ','
          - !Sub
            - '${base},${pip}'
            - { base: !Join [',', !Ref LayerVersionArns], pip: !Ref PythonLayerArn }
        - [!Ref PythonLayerArn]
      Runtime: python3.7
      Timeout: 120
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']

  EngineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-policy-engine
      RetentionInDays: !Ref CloudWatchLogRetentionDays

Outputs:
  GatewayId:
    Description: API Gateway ID
    Value: !Ref GatewayApi

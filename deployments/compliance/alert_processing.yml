# Panther is a scalable, powerful, cloud-native SIEM written in Golang/React.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Compliance alert SQS queue and processing functions

Parameters:
  CloudWatchLogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    Default: 365
  Debug:
    Type: String
    Description: Toggle debug logging
    Default: false
    AllowedValues: [true, false]
  LayerVersionArns:
    Type: CommaDelimitedList
    Description: List of base LayerVersion ARNs to attach to every Lambda function
    Default: ''
  TracingMode:
    Type: String
    Description: Enable XRay tracing on Lambda and API Gateway
    AllowedValues: ['', Active, PassThrough]
    Default: ''

  AnalysisApiId:
    Type: String
    Description: API Gateway for analysis-api
  ComplianceApiId:
    Type: String
    Description: API Gateway for compliance-api
  RemediationApiId:
    Type: String
    Description: API Gateway for remediation-api
  SQSKeyId:
    Type: String
    Description: KMS key ID for SQS encryption

Conditions:
  AttachLayers: !Not [!Equals [!Join ['', !Ref LayerVersionArns], '']]
  TracingEnabled: !Not [!Equals ['', !Ref TracingMode]]

Resources:
  ##### Alert Processor #####
  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: panther-alert-processor-queue
      MessageRetentionPeriod: 1209600 # Max duration - 14 days
      KmsMasterKeyId: !Ref SQSKeyId
      VisibilityTimeout: 60 # Should match lambda timeout
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt [DeadLetterQueue, Arn]
        maxReceiveCount: 10

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: panther-alert-processor-dlq
      MessageRetentionPeriod: 1209600 # Max duration - 14 days
      VisibilityTimeout: 60

  AlertProcessorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-alert-processor
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  AlertProcessor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../out/bin/internal/compliance/alert_processor/main
      Description: Processes the events generated from the compliance engine
      Environment:
        Variables:
          DEBUG: !Ref Debug
          REMEDIATION_SERVICE_HOST: !Sub '${RemediationApiId}.execute-api.${AWS::Region}.${AWS::URLSuffix}'
          REMEDIATION_SERVICE_PATH: v1
          COMPLIANCE_SERVICE_HOST: !Sub '${ComplianceApiId}.execute-api.${AWS::Region}.${AWS::URLSuffix}'
          COMPLIANCE_SERVICE_PATH: v1
          POLICY_SERVICE_HOST: !Sub '${AnalysisApiId}.execute-api.${AWS::Region}.${AWS::URLSuffix}'
          POLICY_SERVICE_PATH: v1
          TABLE_NAME: !Ref Table
      Events:
        Queue:
          Type: SQS
          Properties:
            Queue: !GetAtt Queue.Arn
            BatchSize: 1
      FunctionName: panther-alert-processor
      Handler: main
      Layers: !If [AttachLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      MemorySize: 128
      Runtime: go1.x
      Timeout: 60
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Policies:
        - Id: ReadFromSQS
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ReceiveMessage
              Resource: !GetAtt Queue.Arn
            - Effect: Allow
              Action: kms:Decrypt
              Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${SQSKeyId}
        - Id: UpdateTable
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: dynamodb:UpdateItem
              Resource: !GetAtt Table.Arn
        - Id: InvokeGatewayApi
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: execute-api:Invoke
              Resource:
                - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${RemediationApiId}/v1/POST/remediateasync
                - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ComplianceApiId}/v1/GET/status
                - !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${AnalysisApiId}/v1/GET/policy

  ##### Alert Forwarder #####
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: panther-alert-forwarder
      AttributeDefinitions:
        - AttributeName: policyId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: policyId
          KeyType: HASH
      PointInTimeRecoverySpecification: # Create periodic table backups
        PointInTimeRecoveryEnabled: True
      SSESpecification: # Enable server-side encryption
        SSEEnabled: True
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      TimeToLiveSpecification:
        AttributeName: expiresAt
        Enabled: true

  AlertForwarderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-alert-forwarder
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  AlertForwarder:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../out/bin/internal/compliance/alert_forwarder/main
      Description: Forwards the alerts to the alert delivery mechanism
      Environment:
        Variables:
          ALERTING_QUEUE_URL: !Sub https://sqs.${AWS::Region}.${AWS::URLSuffix}/${AWS::AccountId}/panther-alerts
          DEBUG: !Ref Debug
      Events:
        DynamoDBEvent:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt Table.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 1
      FunctionName: panther-alert-forwarder
      Handler: main
      MemorySize: 128
      Runtime: go1.x
      Layers: !If [AttachLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      Timeout: 60
      Policies:
        - Id: ReadTableStreams
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:DescribeStream
                - dynamodb:GetRecords
                - dynamodb:GetShardIterator
                - dynamodb:ListStreams
              Resource: !Sub ${Table.Arn}/stream/*
        - Id: PublishToAlertQueue
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
                - sqs:SendMessageBatch
              Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:panther-alerts
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey
              Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${SQSKeyId}

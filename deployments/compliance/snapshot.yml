# Panther is a scalable, powerful, cloud-native SIEM written in Golang/React.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Panther Snapshot Infra

Parameters:
  CloudWatchLogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    Default: 365
  Debug:
    Type: String
    Description: Toggle debug logging
    Default: false
    AllowedValues: [true, false]
  LayerVersionArns:
    Type: CommaDelimitedList
    Description: List of base LayerVersion ARNs to attach to every Lambda function
    Default: ''
  TracingMode:
    Type: String
    Description: Enable XRay tracing on Lambda and API Gateway
    AllowedValues: ['', Active, PassThrough]
    Default: ''

  AuditRoleName:
    Type: String
    Default: PantherAuditRole
    Description: The name of the IAM role to assume to perform AWS account/service scans
  ResourcesApiId:
    Type: String
    Description: API Gateway for resources-api
  SQSKeyId:
    Type: String
    Description: KMS key ID for SQS encryption
  LogAnalysisQueueName:
    Type: String
    Default: panther-input-data-notifications

Conditions:
  AttachLayers: !Not [!Equals [!Join ['', !Ref LayerVersionArns], '']]
  TracingEnabled: !Not [!Equals ['', !Ref TracingMode]]

Resources:
  ##### Snapshot Poller #####
  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: panther-snapshot-queue
      # <cfndoc>
      # This sqs queue has snapshot request events processed by the `panther-snapshot-pollers` lambda.
      #
      # Failure Impact
      # * Failure of this sqs queue will impact the scanning for changes in infrastrucure.
      # * Failed events will go into the `panther-snapshot-queue-dlq`. When the system has recovered they should be re-queued to the `panther-snapshot-queue` using the Panther tool `requeue`.
      # </cfndoc>
      KmsMasterKeyId: !Ref SQSKeyId
      VisibilityTimeout: 900 # Should match lambda
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 10

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: panther-snapshot-queue-dlq
      # <cfndoc>
      # The dead letter queue for the `panther-snapshot-queue`.
      # Items are in this queue due to a failure of the `panther-snapshot-pollers` lambda.
      # When the system has recovered they should be re-queued to the `panther-snapshot-queue` using
      # the Panther tool `requeue`.
      # </cfndoc>
      MessageRetentionPeriod: 1209600 # Max duration - 14 days
      VisibilityTimeout: 60

  PollerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../out/bin/internal/compliance/snapshot_poller/main
      Description: Polls AWS resources and writes them to the resources-api
      Environment:
        Variables:
          AUDIT_ROLE_NAME: !Ref AuditRoleName
          DEBUG: !Ref Debug
          RESOURCES_API_FQDN: !Sub '${ResourcesApiId}.execute-api.${AWS::Region}.${AWS::URLSuffix}'
          RESOURCES_API_PATH: v1
          SNAPSHOT_QUEUE_URL: !Ref Queue
      Events:
        SQS:
          Type: SQS
          Properties:
            Queue: !GetAtt Queue.Arn
            BatchSize: 1
      FunctionName: panther-snapshot-pollers
      # <cfndoc>
      # This lambda read requests from the `panther-snapshot-queue` and scans infrastructure
      # calling the `panther-resource-api` to trigger policy evaluations.
      #
      # Failure Impact
      # * Failure of this lambda will impact cloud security infrastructure editing.
      # * Failed events will go into the `panther-snapshot-queue-dlq`. When the system has recovered they should be re-queued to the `panther-snapshot-queue` using the Panther tool `requeue`.
      # </cfndoc>
      Handler: main
      Layers: !If [AttachLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      MemorySize: 128
      Runtime: go1.x
      Timeout: 900
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Policies:
        - Id: ManageSQSMessages
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ReceiveMessage
                - sqs:SendMessage
                - sqs:SendMessageBatch
              Resource: !GetAtt Queue.Arn
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey
              Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${SQSKeyId}
        - Id: InvokeResourcesAPI
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: execute-api:Invoke
              Resource: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${ResourcesApiId}/v1/POST/resource
        - Id: AssumePantherAuditRoles
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Resource: !Sub arn:${AWS::Partition}:iam::*:role/${AuditRoleName}

  PollerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-snapshot-pollers
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  ##### Snapshot API #####
  IntegrationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: panther-source-integrations
      # <cfndoc>
      # This table does hold the configured accounts and log sources for monitoring.
      #
      # Failure Impact
      # * Processing of policies could be slowed or stopped if there are errors/throttles.
      # * The Panther user interface could be impacted.
      # </cfndoc>
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: integrationId
          AttributeType: S
      KeySchema:
        - AttributeName: integrationId
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification: # Enable server-side encryption
        SSEEnabled: True

  ApiLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../out/bin/internal/compliance/snapshot_api/main
      Description: Manages database of source integrations
      Environment:
        Variables:
          DEBUG: !Ref Debug
          SNAPSHOT_POLLERS_QUEUE_URL: !Ref Queue
          LOG_PROCESSOR_QUEUE_URL: !Sub https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${LogAnalysisQueueName}
          LOG_PROCESSOR_QUEUE_ARN: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${LogAnalysisQueueName}
          TABLE_NAME: !Ref IntegrationsTable
      FunctionName: panther-snapshot-api
      # <cfndoc>
      # The `panther-snapshot-api` lambda triggers scans when called by writing requests
      # to the `panther-snapshot-queue`.
      #
      # Failure Impact
      # * Failure of this lambda will prevent infrastructure scans of accounts from running.
      # * Failed events will go into the `panther-snapshot-queue-dlq`. When the system has recovered they should be re-queued to the `panther-snapshot-queue` using the Panther tool `requeue`.
      # </cfndoc>
      Handler: main
      Layers: !If [AttachLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      MemorySize: 512
      Runtime: go1.x
      Timeout: 120
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Policies:
        - Id: IntegrationsTablePermissions
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*Item
                - dynamodb:Query
                - dynamodb:Scan
              Resource: !GetAtt IntegrationsTable.Arn
        - Id: SendSQSMessages
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
                - sqs:SendMessageBatch
              Resource: !GetAtt Queue.Arn
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey
              Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${SQSKeyId}
        - Id: UpdateLogProcessorQueue
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: sqs:*QueueAttributes
              Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${LogAnalysisQueueName}

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-snapshot-api
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  ##### Snapshot Scheduler #####
  SchedulerLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../out/bin/internal/compliance/snapshot_scheduler/main
      Description: Runs once daily to schedule account-wide scans
      Environment:
        Variables:
          DEBUG: !Ref Debug
          SNAPSHOT_POLLERS_QUEUE_URL: !Ref Queue
      Events:
        ScheduleScans:
          Type: Schedule
          Properties:
            Schedule: rate(24 hours)
      FunctionName: panther-snapshot-scheduler
      # <cfndoc>
      # The `panther-snapshot-scheduler` lambda calls the `panther-snapshot-api` for infrastructure scans triggered
      # by a 24 hour CloudWatch timer events.
      #
      # Failure Impact
      # * Failure of this lambda will prevent daily infrastructure scans of accounts from running.
      # </cfndoc>
      Handler: main
      Layers: !If [AttachLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      MemorySize: 128
      Runtime: go1.x
      Timeout: 120
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Policies:
        - Id: InvokeSnapshotAPI
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: lambda:InvokeFunction
              Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-snapshot-api
        - Id: SendSQSMessages
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sqs:SendMessage
                - sqs:SendMessageBatch
              Resource: !GetAtt Queue.Arn
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey
              Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${SQSKeyId}

  SchedulerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-snapshot-scheduler
      RetentionInDays: !Ref CloudWatchLogRetentionDays

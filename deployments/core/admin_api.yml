# Panther is a scalable, powerful, cloud-native SIEM written in Golang/React.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Users, Organization, and Onboarding APIs

Parameters:
  CloudWatchLogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    Default: 365
  Debug:
    Type: String
    Default: false
    Description: Toggle debug logging
    AllowedValues: [true, false]
  LayerVersionArns:
    Type: CommaDelimitedList
    Description: List of LayerVersion ARNs to attach to each function
    Default: ''
  TracingMode:
    Type: String
    Description: Enable XRay tracing on Lambda and API Gateway
    AllowedValues: ['', Active, PassThrough]
    Default: ''

  UsersMemorySizeMB:
    Type: Number
    Description: Memory (MB) available for the users-api Lambda function
    Default: 128
    MinValue: 128
    MaxValue: 3008
  UsersTimeoutSec:
    Type: Number
    Description: Timeout (seconds) for the users-api Lambda function
    Default: 60
    MinValue: 5
    MaxValue: 900
  OrganizationMemorySizeMB:
    Type: Number
    Description: Memory (MB) available for the organization-api Lambda function
    Default: 128
    MinValue: 128
    MaxValue: 3008
  OrganizationTimeoutSec:
    Type: Number
    Description: Timeout (seconds) for the organization-api Lambda function
    Default: 60
    MinValue: 5
    MaxValue: 900
  OnboardingMemorySizeMB:
    Type: Number
    Description: Memory (MB) available for the onboarding-api Lambda function
    Default: 128
    MinValue: 128
    MaxValue: 3008
  OnboardingTimeoutSec:
    Type: Number
    Description: Timeout (seconds) for the onboarding-api Lambda function
    Default: 60
    MinValue: 5
    MaxValue: 900

  AppDomainURL:
    Type: String
    Description: Panther App Domain used as a link for the customer in the invitation email
    Default: app.runpanther.io
  SesSourceEmailArn:
    Type: String
    Description: The ARN of a verified email address in Amazon SES
    Default: ''

  # Onboarding Parameters
  ApiGatewayStageName:
    Type: String
    Description: Name of the deployment stage for API gateway
    Default: Panther-Onboarding
  ApiGatewayThrottleBurstLimit:
    Type: Number
    Description: Maximum number of concurrent request submissions
    Default: 10
  ApiGatewayThrottleRateLimit:
    Type: Number
    Description: Steady state limit on request rate
    Default: 50
  ApiGatewayLoggingLevel:
    Type: String
    Description: Logging level for API Gateway
    Default: ERROR
    AllowedValues:
      - OFF
      - ERROR
      - INFO

Conditions:
  AttachLayers: !Not [!Equals [!Join ['', !Ref LayerVersionArns], '']]
  TracingEnabled: !Not [!Equals ['', !Ref TracingMode]]

Resources:
  #### Users API ####
  UsersAPILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-users-api
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  CognitoSNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CognitoSNSRole
      Description: Cognito assumes this role to send 2FA SMS codes to Panther users
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CognitoSNSPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: sns:publish
                # Must be '*' because the topic is Amazon controlled and not in our account
                Resource: '*'

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      PointInTimeRecoverySpecification:  # Create periodic table backups
        PointInTimeRecoveryEnabled: True
      SSESpecification:  # Enable server-side encryption
        SSEEnabled: True
      TableName: panther-users

  UsersAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../out/bin/internal/core/users_api/main
      Description: CRUD actions for the cognito api
      Environment:
        Variables:
          DEBUG: !Ref Debug
          USERS_TABLE_NAME: !Ref UsersTable
          ORGANIZATIONS_API: !Ref OrganizationAPIFunction
          CUSTOM_MESSAGES_TRIGGER_HANDLER: !GetAtt CustomMessageTriggerFunction.Arn
          APP_DOMAIN_URL: !Ref AppDomainURL
          SES_SOURCE_EMAIL_ARN: !Ref SesSourceEmailArn
      FunctionName: panther-users-api
      Handler: main
      Layers: !If [AttachLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      MemorySize: !Ref UsersMemorySizeMB
      Runtime: go1.x
      Timeout: !Ref UsersTimeoutSec
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Policies:
        - !If [TracingEnabled, 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess', !Ref 'AWS::NoValue']
        -
          Id: CognitoUserManagement
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Action:
                - cognito-idp:AdminAddUserToGroup
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminDeleteUser
                - cognito-idp:AdminDisableUser
                - cognito-idp:AdminEnableUser
                - cognito-idp:AdminGetUser
                - cognito-idp:AdminListGroupsForUser
                - cognito-idp:AdminRemoveUserFromGroup
                - cognito-idp:AdminUpdateUserAttributes
                - cognito-idp:CreateUserPool
                - cognito-idp:CreateUserPoolClient
                - cognito-idp:CreateGroup
                - cognito-idp:DescribeUserPool
                - cognito-idp:GetUser
                - cognito-idp:ListGroups
                - cognito-idp:ListUsers
                - cognito-idp:SetUserPoolMfaConfig
              Resource: !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*
            -
              Effect: Allow
              Action:
                - cognito-identity:*
                - cognito-idp:CreateUserPool
              Resource: '*'
            -
              Effect: Allow
              Action:
                - iam:GetRole
                - iam:PassRole
                - iam:UpdateAssumeRolePolicy
              Resource:
                - !Sub arn:aws:iam::${AWS::AccountId}:role/CognitoSNSRole
                - !Sub arn:aws:iam::${AWS::AccountId}:role/DefaultIdentityPoolAuthenticatedRol
                - !Sub arn:aws:iam::${AWS::AccountId}:role/IdentityPoolAuthenticatedAdminsRole
        -
          Id: AppsyncManagement
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Action:
                - appsync:GetGraphqlApi
                - appsync:ListGraphqlApis
                - appsync:UpdateGraphqlApi
              Resource: !Sub arn:aws:appsync:${AWS::Region}:${AWS::AccountId}*
        -
          Id: InvokeOrganizationAPI
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Action: lambda:InvokeFunction
              Resource: !GetAtt OrganizationAPIFunction.Arn
        -
          Id: ManageUsersDB
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Action:
                - dynamodb:*Item
                - dynamodb:Query
                - dynamodb:Scan
              Resource: !GetAtt UsersTable.Arn

  ##### Custom message trigger function #####
  CustomMessageTriggerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-cognito-custom-message-trigger
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  CustomMessageTriggerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../out/bin/internal/core/custom_message/main
      Description: Custom Message trigger for Cognito user events
      Environment:
        Variables:
          DEBUG: !Ref Debug
          APP_DOMAIN_URL: !Ref AppDomainURL
      FunctionName: panther-cognito-custom-message-trigger
      Handler: main
      Layers: !If [AttachLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      MemorySize: !Ref UsersMemorySizeMB
      Runtime: go1.x
      Timeout: !Ref UsersTimeoutSec
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Policies:
        - !If [TracingEnabled, 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess', !Ref 'AWS::NoValue']
        -
          Id: GetCognitoUsers
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: cognito-idp:AdminGetUser
              Resource: !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*

  CustomMessageTriggerInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt CustomMessageTriggerFunction.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/*

  ##### Organization API #####
  OrganizationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      PointInTimeRecoverySpecification:  # Create periodic table backups
        PointInTimeRecoveryEnabled: True
      SSESpecification:  # Enable server-side encryption
        SSEEnabled: True
      TableName: panther-organization

  OrganizationAPILogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-organization-api
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  OrganizationAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../out/bin/internal/core/organization_api/main
      Description: CRUD actions for the organization database
      Environment:
        Variables:
          DEBUG: !Ref Debug
          ORG_TABLE_NAME: !Ref OrganizationTable
      FunctionName: panther-organization-api
      Handler: main
      Layers: !If [AttachLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      MemorySize: !Ref OrganizationMemorySizeMB
      Runtime: go1.x
      Timeout: !Ref OrganizationTimeoutSec
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Policies:
        - !If [TracingEnabled, 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess', !Ref 'AWS::NoValue']
        -
          Id: ManageOrganizationTable
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*Item
                - dynamodb:Scan
              Resource: !GetAtt OrganizationTable.Arn

  ### API Gateway Infrastructure
  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      RoleName: PantherAPIGatewayOnboardingRole
      Policies:
        - PolicyName: ApiGatewayPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              -
                Effect: Allow
                Action: states:startExecution
                Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:stateMachine:panther-*
              -
                Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !GetAtt UsersAPIFunction.Arn

  OnboardOrganizationRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Onboards a new organization
      Name: panther-onboarding-api

  OnboardOrganizationResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt OnboardOrganizationRestApi.RootResourceId
      PathPart: organization
      RestApiId: !Ref OnboardOrganizationRestApi

  # Defines the structure of the request payload
  OnboardRequestModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: OnboardOrganizationRequest
      RestApiId: !Ref OnboardOrganizationRestApi
      Schema: |-
        {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "OnboardOrganization",
          "type": "object",
          "properties": {
            "displayName": { "type": "string" },
            "email": { "type": "string" },
            "firstName": { "type": "string" },
            "lastName": { "type": "string" }
          }
        }

  OnboardOrganizationMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          -
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          # For a given content type, map the request to a format understood by Step Function
          application/json: !Sub |-
            #set($inputRoot = $input.path('$'))
            {
                "input": "{\"displayName\" : \"$inputRoot.displayName\", \"email\" : \"$inputRoot.email\", \"firstName\" : \"$inputRoot.firstName\", \"lastName\" : \"$inputRoot.lastName\"}",
                "stateMachineArn": "${OnboardOrganizationStateMachine}"
            }
        Type: AWS
        Uri: arn:aws:apigateway:us-west-2:states:action/StartExecution
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      OperationName: OnboardOrganization
      RequestModels:
        application/json : !Ref OnboardRequestModel
      ResourceId: !Ref OnboardOrganizationResource
      RestApiId: !Ref OnboardOrganizationRestApi

  # This method must exist to enable preflight checks for CORS requests
  OnboardOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref OnboardOrganizationRestApi
      ResourceId: !Ref OnboardOrganizationResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  GetOrganizationAccessResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt OnboardOrganizationRestApi.RootResourceId
      PathPart: organizationAccess
      RestApiId: !Ref OnboardOrganizationRestApi

  # Defines the structure of the request payload
  OrganizationAccessRequestModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: application/json
      Name: OrganizationAccessRequest
      RestApiId: !Ref OnboardOrganizationRestApi
      Schema: |-
        {
          "$schema": "http://json-schema.org/draft-04/schema#",
          "title": "GetOrganizationAccessByEmail",
          "type": "object",
          "properties": {
            "email": { "type": "string" }
          }
        }

  GetOrganizationAccessMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: POST
      Integration:
        Credentials: !GetAtt ApiGatewayRole.Arn
        IntegrationHttpMethod: POST
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          # For a given content type, map the request to a format understood by Step Function
          application/json: |-
            #set($inputRoot = $input.path('$'))
            {
                "getUserOrganizationAccess": {"email" : "$inputRoot.email" }
            }
        Type: AWS
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersAPIFunction.Arn}/invocations
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
      OperationName: GetOrganizationAccess
      RequestModels:
        application/json: !Ref OrganizationAccessRequestModel
      ResourceId: !Ref GetOrganizationAccessResource
      RestApiId: !Ref OnboardOrganizationRestApi

  # This method must exist to enable preflight checks for CORS requests
  GetOrganizationAccessOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref OnboardOrganizationRestApi
      ResourceId: !Ref GetOrganizationAccessResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: '200'
          ResponseModels:
            application/json: 'Empty'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: OnboardOrganizationMethod
    Properties:
      Description: Deployment
      RestApiId: !Ref OnboardOrganizationRestApi
      StageDescription:
        DataTraceEnabled: true
        LoggingLevel: !Ref ApiGatewayLoggingLevel
        MetricsEnabled: true
        TracingEnabled: !If [TracingEnabled, true, false]
      StageName: !Ref ApiGatewayStageName

  ApiGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: ApiGatewayDeployment
    Properties:
      ApiStages:
        - ApiId: !Ref OnboardOrganizationRestApi
          Stage: !Ref ApiGatewayStageName
      Throttle:
        BurstLimit : !Ref ApiGatewayThrottleBurstLimit
        RateLimit: !Ref ApiGatewayThrottleRateLimit

  ### Step Function
  StepFunctionInvokeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: !Sub states.${AWS::Region}.amazonaws.com
            Action: sts:AssumeRole
      RoleName: StepFunctionInvokeLambdaRole
      Policies:
        - PolicyName: StepFunctionInvokeLambdaPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource:
                  - !GetAtt UsersAPIFunction.Arn
                  - !GetAtt OrganizationAPIFunction.Arn

  OnboardOrganizationStateMachine:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString: !Sub |
        {
          "StartAt": "CreateOrganization",
          "States": {
            "CreateOrganization": {
              "Parameters": {
                  "createOrganization": {
                    "displayName.$": "$.displayName",
                    "email.$": "$.email"
                  }
              },
              "Type": "Task",
              "ResultPath": "$.createOrganizationOutput",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-organization-api",
              "Next": "CreateInfrastructure"
            },
            "CreateInfrastructure": {
              "Parameters": {
                  "createUserInfrastructure": {
                    "givenName.$": "$.firstName",
                    "familyName.$": "$.lastName",
                    "displayName.$": "$.displayName",
                    "email.$": "$.email"
                  }
              },
              "Type": "Task",
              "ResultPath": "$.createInfrastructureOutput",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-users-api",
              "Next": "AddUserToOrganization"
            },
            "AddUserToOrganization": {
              "Parameters": {
                  "addUserToOrganization": {
                    "email.$": "$.email"
                  }
              },
              "Type": "Task",
              "ResultPath": "$.addUserToOrganizationOutput",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-users-api",
              "Next": "UpdateOrganization"
            },
            "UpdateOrganization": {
              "Parameters": {
                  "updateOrganization": {
                    "displayName.$": "$.displayName",
                    "email.$": "$.email",
                    "awsConfig": {
                      "appClientId.$": "$.createInfrastructureOutput.appClientId",
                      "userPoolId.$": "$.createInfrastructureOutput.userPoolId",
                      "identityPoolId.$": "$.createInfrastructureOutput.identityPoolId"
                    }
                  }
              },
              "Type": "Task",
              "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-organization-api",
              "End": true
            }
          }
        }
      RoleArn: !GetAtt StepFunctionInvokeLambdaRole.Arn
      StateMachineName: panther-onboard-organization

  ### Panther Onboarding Lambda Role, Function, and Log Group
  OnboardingAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../out/bin/internal/core/organization_onboarding/main
      Description: CRUD actions for the step function api
      FunctionName: panther-onboarding-api
      Layers: !If [AttachLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      Handler: main
      MemorySize: !Ref OnboardingMemorySizeMB
      Timeout: !Ref OnboardingTimeoutSec
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Runtime: go1.x
      Policies:
        - !If [TracingEnabled, 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess', !Ref 'AWS::NoValue']
        -
          Id: DescribeOrganizationSfn
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: states:DescribeExecution
              Resource: !Sub arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:${OnboardOrganizationStateMachine.Name}:*

  OnboardingFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-onboarding
      RetentionInDays: !Ref CloudWatchLogRetentionDays

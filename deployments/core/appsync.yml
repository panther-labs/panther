# Panther is a scalable, powerful, cloud-native SIEM written in Golang/React.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Description: Creates AppSync GraphQLApi

Parameters:
  AnalysisApi:
    Type: String
    Description: API Gateway endpoint for panther-analysis-api
  ComplianceApi:
    Type: String
    Description: API Gateway endpoint for panther-compliance-api
  RemediationApi:
    Type: String
    Description: API Gateway endpoint for panther-remediation-api
  ResourcesApi:
    Type: String
    Description: API Gateway endpoint for panther-resources-api
  UserPoolId:
    Type: String
    Description: Cognito user pool ID

  TracingMode:
    Type: String
    Description: Enable XRay tracing on GraphQL queries & mutations
    Default: ''
  CloudWatchLogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    Default: 365

Conditions:
  TracingEnabled: !Not [!Equals ['', !Ref TracingMode]]

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/appsync/apis/${GraphQLApi.ApiId}
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: panther-graphql-api
      # <cfndoc>
      # This is the GraphQL endpoint for the Panther UI.
      #
      # Failure Impact
      # * The Panther user interface will show errors.
      # </cfndoc>
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        AwsRegion: !Ref AWS::Region
        UserPoolId: !Ref UserPoolId
        DefaultAction: ALLOW
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppsyncServiceRole.Arn
        FieldLogLevel: ALL
      XrayEnabled: !If [TracingEnabled, True, !Ref 'AWS::NoValue']

  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      DefinitionS3Location: ../../api/graphql/schema.graphql

  AppsyncServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Description: Appsync service role which invokes API lambdas and gateways and writes CloudWatch logs
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: appsync.amazonaws.com
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs
      Policies:
        - PolicyName: InvokeLegacyApis
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:InvokeFunction
                Resource: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-*-api
        - PolicyName: InvokeGatewayApis
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: execute-api:Invoke
                Resource: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:*

  ########## Data Sources ##########
  AlertsAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: PantherAlertsAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppsyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-alerts-api

  UsersAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: PantherUsersAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppsyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-users-api

  DestinationsAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: PantherDestinationsAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppsyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-outputs-api

  SourceAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: PantherSourceAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppsyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-source-api

  OrganizationAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: PantherOrganizationAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !GetAtt AppsyncServiceRole.Arn
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-organization-api

  ResourcesAPIHttpDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: PantherResourcesAPIHttp
      Type: HTTP
      ServiceRoleArn: !GetAtt AppsyncServiceRole.Arn
      HttpConfig:
        AuthorizationConfig:
          AuthorizationType: AWS_IAM
          AwsIamConfig:
            SigningRegion: !Ref AWS::Region
            SigningServiceName: execute-api
        Endpoint: !Ref ResourcesApi

  ComplianceAPIHttpDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: PantherComplianceAPIHttp
      Type: HTTP
      ServiceRoleArn: !GetAtt AppsyncServiceRole.Arn
      HttpConfig:
        AuthorizationConfig:
          AuthorizationType: AWS_IAM
          AwsIamConfig:
            SigningRegion: !Ref AWS::Region
            SigningServiceName: execute-api
        Endpoint: !Ref ComplianceApi

  AnalysisAPIHttpDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: PantherAnalysisAPIHttp
      Type: HTTP
      ServiceRoleArn: !GetAtt AppsyncServiceRole.Arn
      HttpConfig:
        AuthorizationConfig:
          AuthorizationType: AWS_IAM
          AwsIamConfig:
            SigningRegion: !Ref AWS::Region
            SigningServiceName: execute-api
        Endpoint: !Ref AnalysisApi

  RemediationAPIHttpDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: PantherRemediationAPIHttp
      Type: HTTP
      ServiceRoleArn: !GetAtt AppsyncServiceRole.Arn
      HttpConfig:
        AuthorizationConfig:
          AuthorizationType: AWS_IAM
          AwsIamConfig:
            SigningRegion: !Ref AWS::Region
            SigningServiceName: execute-api
        Endpoint: !Ref RemediationApi

  ########## Resolvers ##########

  ResetUserPasswordResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: resetUserPassword
      DataSourceName: !GetAtt UsersAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "resetUserPassword": {
              "id": $ctx.args.id
            }
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, $ctx.args)
        #else
          $util.toJson($context.result)
        #end

  UpdateUserResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: updateUser
      DataSourceName: !GetAtt UsersAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "updateUser": $ctx.args.input
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, $ctx.args)
        #else
          $util.toJson($context.result)
        #end

  DeleteUserResolver:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: deleteUser
      DataSourceName: !GetAtt UsersAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "removeUser": {
              "id": $ctx.args.id
            }
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, $ctx.args)
        #else
          $util.toJson($context.result)
        #end

  ListUsersResolver:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: users
      DataSourceName: !GetAtt UsersAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "listUsers": {}
          })
        }
      ResponseMappingTemplate: |
        #if( $context.error )
          $util.error($context.error.errorMessage, $context.error.errorType, {})
        #else
          $util.toJson($context.result)
        #end

  InviteUserResolver:
    Type: 'AWS::AppSync::Resolver'
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: inviteUser
      DataSourceName: !GetAtt UsersAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "inviteUser": $input
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, $ctx.args)
        #else
          $util.toJson($context.result)
        #end

  GetDestinationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: destination
      DataSourceName: !GetAtt DestinationsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getOutput": {
              "outputId": $ctx.args.id
            }
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, $ctx.args)
        #else
          $util.toJson($context.result)
        #end

  ListDestinationsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: destinations
      DataSourceName: !GetAtt DestinationsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getOutputs": {}
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, {})
        #else
          $util.toJson($ctx.result)
        #end

  AddDestinationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: addDestination
      DataSourceName: !GetAtt DestinationsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("userId", $ctx.identity.sub))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "addOutput": $input
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
            $util.error($context.error.errorMessage, $context.error.errorType, $ctx.args)
        #else
          $util.toJson($context.result)
        #end

  DeleteDestinationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: deleteDestination
      DataSourceName: !GetAtt DestinationsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "deleteOutput": {
              "outputId": $ctx.args.id,
              "force": true
            }
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, $ctx.args)
        #else
          $util.toJson($context.result)
        #end

  UpdateDestinationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: updateDestination
      DataSourceName: !GetAtt DestinationsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("userId", $ctx.identity.sub))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "updateOutput": $input
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, $ctx.args)
        #else
          $util.toJson($context.result)
        #end

  ListIntegrationsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: integrations
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getEnabledIntegrations": {
              "integrationType": $ctx.args.input.integrationType
            }
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, {})
        #else
          $util.toJson($ctx.result)
        #end

  AddIntegrationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: addIntegration
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($sourcesInput = [])
        #foreach($item in $ctx.args.input.integrations)
          #set ($inputItem = {})
          #foreach ($key in $item.keySet())
            $util.qr($inputItem.put($key, $item.get($key)))
          #end
          $util.qr($inputItem.put("userId", $ctx.identity.sub))
          $util.qr($inputItem.put("scanIntervalMins", 1440))
          $util.qr($inputItem.put("scanEnabled", true))
          $util.qr($sourcesInput.add($inputItem))
        #end
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "putIntegration": {
              "integrations": $sourcesInput
            }
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, $ctx.args)
        #else
          $util.toJson($context.result.get(0))
        #end

  UpdateIntegrationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: updateIntegration
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("scanIntervalMins", 1440))
        $util.qr($input.put("scanEnabled", true))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "updateIntegrationSettings": $input
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, $ctx.args)
        #else
          $util.toJson($context.result)
        #end

  DeleteIntegrationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: deleteIntegration
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "deleteIntegration": {
              "integrationId": $ctx.args.id
            }
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, $ctx.args)
        #else
          $util.toJson($context.result)
        #end

  GetGeneralSettingsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: generalSettings
      DataSourceName: !GetAtt OrganizationAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getSettings": {}
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, {})
        #else
          $util.toJson($context.result)
        #end

  UpdateGeneralSettingsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: updateGeneralSettings
      DataSourceName: !GetAtt OrganizationAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "updateSettings": $ctx.args.input
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, $ctx.args)
        #else
          $util.toJson($context.result)
        #end

  ListPoliciesResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: policies
      DataSourceName: !GetAtt AnalysisAPIHttpDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "method": "GET",
          "resourcePath": "/v1/list",
          "params": {
            "query": $util.toJson($ctx.args.input),
            "headers": {
              "Content-Type": "application/json"
            }
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  GetPolicyResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: policy
      DataSourceName: !GetAtt AnalysisAPIHttpDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "method": "GET",
          "resourcePath": "/v1/policy",
          "params": {
            "query": $util.toJson($ctx.args.input),
            "headers": {
              "Content-Type": "application/json"
            }
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  UpdatePolicyResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: updatePolicy
      DataSourceName: !GetAtt AnalysisAPIHttpDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("userId", $ctx.identity.sub))
        {
          "version": "2018-05-29",
          "method": "POST",
          "resourcePath": "/v1/update",
          "params": {
            "headers": {
              "Content-Type": "application/json"
            },
            "body": $util.toJson($input)
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  AddPolicyResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: addPolicy
      DataSourceName: !GetAtt AnalysisAPIHttpDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("userId", $ctx.identity.sub))
        {
          "version": "2018-05-29",
          "method": "POST",
          "resourcePath": "/v1/policy",
          "params": {
            "headers": {
              "Content-Type": "application/json"
            },
            "body": $util.toJson($input)
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 201)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  DeletePolicyResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: deletePolicy
      DataSourceName: !GetAtt AnalysisAPIHttpDataSource.Name
      RequestMappingTemplate: |
        #set ($policiesInput = [])
        #foreach($item in $ctx.args.input.policies)
            #set ($inputItem = {})
            $util.qr($inputItem.put("id", $item.id))
            $util.qr($policiesInput.add($inputItem))
        #end
        {
          "version": "2018-05-29",
          "method": "POST",
          "resourcePath": "/v1/delete",
          "params": {
            "headers": {
              "Content-Type": "application/json"
            },
            "body": $util.toJson({
              "policies": $policiesInput
            })
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            true
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, $statusCode, $ctx.args)
        #else
            $util.error($ctx.result.body, $statusCode, $ctx.args)
        #end

  UploadPoliciesResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: uploadPolicies
      DataSourceName: !GetAtt AnalysisAPIHttpDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("userId", $ctx.identity.sub))
        {
          "version": "2018-05-29",
          "method": "POST",
          "resourcePath": "/v1/upload",
          "params": {
            "headers": {
              "Content-Type": "application/json"
            },
            "body": $util.toJson($input)
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  ListResourcesResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: resources
      DataSourceName: !GetAtt ResourcesAPIHttpDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "method": "GET",
          "resourcePath": "/v1/list",
          "params": {
            "query": $util.toJson($ctx.args.input),
            "headers": {
              "Content-Type": "application/json"
            }
          }
        }

      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  GetResourceResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: resource
      DataSourceName: !GetAtt ResourcesAPIHttpDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "method": "GET",
          "resourcePath": "/v1/resource",
          "params": {
            "query": $util.toJson($ctx.args.input),
            "headers": {
              "Content-Type": "application/json"
            }
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  RemediateResourceResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: remediateResource
      DataSourceName: !GetAtt RemediationAPIHttpDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "method": "POST",
          "resourcePath": "/v1/remediate",
          "params": {
            "headers": {
              "Content-Type": "application/json"
            },
            "body": $util.toJson($ctx.args.input)
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            true
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  ListRemediationsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: remediations
      DataSourceName: !GetAtt RemediationAPIHttpDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("userId", $ctx.identity.sub))
        {
          "version": "2018-05-29",
          "method": "GET",
          "resourcePath": "/v1/",
          "params": {
            "query": $util.toJson($input),
            "headers": {
              "Content-Type": "application/json"
            }
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  OrganizationStatsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: organizationStats
      DataSourceName: !GetAtt ComplianceAPIHttpDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "method": "GET",
          "resourcePath": "/v1/org-overview",
          "params": {
            "query": $util.toJson($ctx.args.input),
            "headers": {
              "Content-Type": "application/json"
            }
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  ResourcesForPolicyResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: resourcesForPolicy
      DataSourceName: !GetAtt ComplianceAPIHttpDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "method": "GET",
          "resourcePath": "/v1/describe-policy",
          "params": {
            "query": $util.toJson($ctx.args.input),
            "headers": {
              "Content-Type": "application/json"
            }
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  PoliciesForResourceResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: policiesForResource
      DataSourceName: !GetAtt ComplianceAPIHttpDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "method": "GET",
          "resourcePath": "/v1/describe-resource",
          "params": {
            "query": $util.toJson($ctx.args.input),
            "headers": {
              "Content-Type": "application/json"
            }
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  SuppressPoliciesResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: suppressPolicies
      DataSourceName: !GetAtt AnalysisAPIHttpDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "method": "POST",
          "resourcePath": "/v1/suppress",
          "params": {
            "body": $util.toJson($ctx.args.input),
            "headers": {
              "Content-Type": "application/json"
            }
          }
        }

      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            true
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  ListRulesResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: rules
      DataSourceName: !GetAtt AnalysisAPIHttpDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "method": "GET",
          "resourcePath": "/v1/rule/list",
          "params": {
            "query": $util.toJson($ctx.args.input),
            "headers": {
              "Content-Type": "application/json"
            }
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  GetRuleResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: rule
      DataSourceName: !GetAtt AnalysisAPIHttpDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "method": "GET",
          "resourcePath": "/v1/rule",
          "params": {
            "query": $util.toJson($ctx.args.input),
            "headers": {
              "Content-Type": "application/json"
            }
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  UpdateRuleResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: updateRule
      DataSourceName: !GetAtt AnalysisAPIHttpDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("userId", $ctx.identity.sub))
        {
          "version": "2018-05-29",
          "method": "POST",
          "resourcePath": "/v1/rule/update",
          "params": {
            "headers": {
              "Content-Type": "application/json"
            },
            "body": $util.toJson($input)
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  AddRuleResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: addRule
      DataSourceName: !GetAtt AnalysisAPIHttpDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("userId", $ctx.identity.sub))
        {
          "version": "2018-05-29",
          "method": "POST",
          "resourcePath": "/v1/rule",
          "params": {
            "headers": {
              "Content-Type": "application/json"
            },
            "body": $util.toJson($input)
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 201)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

  ListAlertsResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: alerts
      DataSourceName: !GetAtt AlertsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "listAlerts": $ctx.args.input
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, $ctx.args)
        #else
          $util.toJson($context.result)
        #end

  GetAlertResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: alert
      DataSourceName: !GetAtt AlertsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getAlert": $ctx.args.input
          })
        }
      ResponseMappingTemplate: |
        #if($context.error)
          $util.error($context.error.errorMessage, $context.error.errorType, $ctx.args)
        #else
          $util.toJson($context.result)
        #end

  TestPolicyResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: testPolicy
      DataSourceName: !GetAtt AnalysisAPIHttpDataSource.Name
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "method": "POST",
          "resourcePath": "/v1/test",
          "params": {
            "headers": {
              "Content-Type": "application/json"
            },
            "body": $util.toJson($ctx.args.input)
          }
        }
      ResponseMappingTemplate: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($statusCode == 200)
            $ctx.result.body
        #elseif($statusCode >= 400 && $statusCode < 500)
            $util.error($util.parseJson($ctx.result.body).message, "$statusCode", $input)
        #else
            $util.error($ctx.result.body, "$statusCode", $input)
        #end

Outputs:
  GraphQLApiEndpoint:
    Description: The URL to the Appsync GraphQL Endpoint
    Value: !GetAtt GraphQLApi.GraphQLUrl
  GraphQLApiId:
    Description: The id of the Appsync GraphQL Endpoint
    Value: !GetAtt GraphQLApi.ApiId

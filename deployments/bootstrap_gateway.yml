# Panther is a Cloud-Native SIEM for the Modern Security Team.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Bootstrap resources that require the source S3 bucket to exist first

Metadata:
  AWS::ServerlessRepo::Application:
    Name: panther-community-bootstrap-gateway
    Author: Panther Labs
    Description: Nested SAR app for Panther Community - Detect threats with log data and improve cloud security posture
    HomePageUrl: https://runpanther.io
    SemanticVersion: 1.2.0
    SourceCodeUrl: https://github.com/panther-labs/panther

# This stack contains resources that need to exist before any other main stack,
# but require S3 buckets to exist first. This is deployed right after bootstrap.yml
#
# - API gateways: 'mage build:cfn' embeds swagger definitions directly into this template,
#     making the template too large to deploy without an S3 bucket
# - Python layer: the layer source has to be uploaded to S3 before the cfn resource can be created
# - Custom resource: the Lambda function which handles custom CFN resources

Parameters:
  # From the config file
  CloudWatchLogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    Default: 365
  LayerVersionArns:
    Type: CommaDelimitedList
    Description: List of LayerVersion ARNs to attach to each function
    Default: ''
  PythonLayerVersionArn:
    Type: String
    Description: Custom Python layer for analysis and remediation
    Default: ''
  TracingMode:
    Type: String
    Description: Enable XRay tracing on Lambda and API Gateway
    AllowedValues: ['', Active, PassThrough]
    Default: ''

  # From the bootstrap stack:
  UserPoolId:
    Type: String
    Description: Cognito user pool ID

Conditions:
  AttachLayers: !Not [!Equals [!Join ['', !Ref LayerVersionArns], '']]
  CreatePythonLayer: !Equals [!Ref PythonLayerVersionArn, '']
  TracingEnabled: !Not [!Equals ['', !Ref TracingMode]]

Resources:
  PythonLayer:
    Condition: CreatePythonLayer
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
        - python3.8
      Content: ../layer.zip # relative to out/deployments since this template will first be swagger-embedded
      Description: Pip libraries available to the Python analysis/remediation functions
      LayerName: panther-analysis

  # When deploying from source, the S3 "source" bucket must exist before this function can be packaged.
  # That is why this resource is here instead of in the very first "bootstrap" stack.
  CustomResourceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../bin/internal/core/custom_resources/main
      Description: Custom CloudFormation resources when deploying Panther
      Environment:
        Variables:
          DEBUG: true
      FunctionName: panther-cfn-custom-resources
      # <cfndoc>
      # Used by CloudFormation when deploying or updating Panther.
      #
      # Failure Impact
      # * Panther itself will not be affected, but deployments may be failing
      # </cfndoc>
      Handler: main
      Layers: !If [AttachLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      MemorySize: 256
      Runtime: go1.x
      Timeout: 900 # Maximum allowed: 15 minutes
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']

      # This function has more permissions than usual because it creates and destroys infrastructure.
      # It is used only by CloudFormation in the deploy process and not by the Panther application itself.
      Policies:
        - Id: CertificateManagement
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - acm:AddTagsToCertificate
                - acm:DeleteCertificate
                - acm:ImportCertificate
                - acm:RemoveTagsFromCertificate
              # ACM certificate IDs are random and at the time of writing, DeleteCertificate does
              # not support using resource tags as a condition.
              # So this is as narrow as this resource can get:
              Resource: !Sub arn:${AWS::Partition}:acm:${AWS::Region}:${AWS::AccountId}:certificate/*
            - Effect: Allow
              Action:
                - iam:DeleteServerCertificate
                - iam:UploadServerCertificate
              Resource:
                - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:server-certificate/panther/*
                # IAM sometimes requires permissions to match the certificate name, not the full path
                # This seems like a bug in IAM, but in any case a fresh deploy/teardown will not work without this:
                - !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:server-certificate/Panther*
        - Id: UserPoolMfa
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: cognito-idp:SetUserPoolMfaConfig
              Resource: !Sub arn:${AWS::Partition}:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${UserPoolId}

  CustomResourceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-cfn-custom-resources
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  # Enable only software MFA for the Cognito user pool - enabling MFA via native CloudFormation
  # forces SMS as a fallback option, but the SDK does not.
  UserPoolMfa:
    Type: Custom::CognitoUserPoolMfa
    Properties:
      ServiceToken: !GetAtt CustomResourceFunction.Arn
      UserPoolId: !Ref UserPoolId

  AnalysisApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody: api/gateway/analysis/api.yml
      EndpointConfiguration: REGIONAL
      Name: panther-analysis-api
      # <cfndoc>
      # The `panther-analysis-api` API Gateway calls the `panther-analysis-api` lambda.
      # </cfndoc>
      StageName: v1
      TracingEnabled: !If [TracingEnabled, true, false]

  ComplianceApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody: api/gateway/compliance/api.yml
      EndpointConfiguration: REGIONAL
      Name: panther-compliance-api
      # <cfndoc>
      # The `panther-compliance-api` API Gateway calls the `panther-compliance-api` lambda.
      # </cfndoc>
      StageName: v1
      TracingEnabled: !If [TracingEnabled, true, false]

  RemediationApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody: api/gateway/remediation/api.yml
      EndpointConfiguration: REGIONAL
      Name: panther-remediation-api
      # <cfndoc>
      # The `panther-remediation-api` API Gateway calls the `panther-remediation-api` lambda.
      # </cfndoc>
      StageName: v1
      TracingEnabled: !If [TracingEnabled, true, false]

  ResourcesApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody: api/gateway/resources/api.yml
      EndpointConfiguration: REGIONAL
      Name: panther-resources-api
      # <cfndoc>
      # The `panther-resources-api` API Gateway calls the `panther-resources-api` lambda.
      # </cfndoc>
      StageName: v1
      TracingEnabled: !If [TracingEnabled, true, false]

Outputs:
  PythonLayerVersionArn:
    Description: Python layer version
    Value: !If [CreatePythonLayer, !Ref PythonLayer, !Ref PythonLayerVersionArn]
  AnalysisApiId:
    Description: Analysis API Gateway ID
    Value: !Ref AnalysisApi
  AnalysisApiEndpoint:
    Description: HTTPS endpoint for the analysis api
    Value: !Sub ${AnalysisApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
  ComplianceApiId:
    Description: Compliance API Gateway ID
    Value: !Ref ComplianceApi
  ComplianceApiEndpoint:
    Description: HTTPS endpoint for the compliance api
    Value: !Sub ${ComplianceApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
  RemediationApiId:
    Description: Remediation API Gateway ID
    Value: !Ref RemediationApi
  RemediationApiEndpoint:
    Description: HTTPS endpoint for the remediation api
    Value: !Sub ${RemediationApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
  ResourcesApiId:
    Description: Resources API Gateway ID
    Value: !Ref ResourcesApi
  ResourcesApiEndpoint:
    Description: HTTPS endpoint for the resources api
    Value: !Sub ${ResourcesApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}

# Panther is a Cloud-Native SIEM for the Modern Security Team.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: API gateway and Python layer

# This stack contains resources that need to exist before any other main stack,
# but require S3 buckets to exist first. This is deployed right after bootstrap.yml
#
# - API gateways: 'mage deploy' embeds swagger definitions directly into this template,
#     making the template too large to deploy without an S3 bucket
# - Python layer: the layer source has to be uploaded to S3 before the cfn resource can be created

Parameters:
  # From the config file
  PythonLayerVersionArn:
    Type: String
    Description: Custom Python layer for analysis and remediation
    Default: ''
  TracingEnabled:
    Type: String
    Description: Enable XRay tracing on API Gateway
    AllowedValues: [true, false]
    Default: false

  # If no custom layer is provided, 'mage deploy' will have uploaded a layer here:
  SourceBucket:
    Type: String
    Description: S3 bucket for the Python analysis layer
    Default: ''
  PythonLayerKey:
    Type: String
    Description: S3 key for the Python analysis layer
    Default: ''
  PythonLayerObjectVersion:
    Type: String
    Description: S3 object version for the python layer zipfile
    Default: ''

Conditions:
  CreatePythonLayer: !Equals [!Ref PythonLayerVersionArn, '']

Resources:
  PythonLayer:
    Condition: CreatePythonLayer
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
      Content:
        S3Bucket: !Ref SourceBucket
        S3Key: !Ref PythonLayerKey
        S3ObjectVersion: !Ref PythonLayerObjectVersion
      Description: Pip libraries available to the Python analysis/remediation functions
      LayerName: panther-analysis

  AnalysisApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody: api/gateway/analysis/api.yml
      EndpointConfiguration: REGIONAL
      Name: panther-analysis-api
      # <cfndoc>
      # The `panther-analysis-api` API Gateway calles the `panther-analysis-api` lambda.
      # </cfndoc>
      StageName: v1
      TracingEnabled: !Ref TracingEnabled

  ComplianceApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody: api/gateway/compliance/api.yml
      EndpointConfiguration: REGIONAL
      Name: panther-compliance-api
      # <cfndoc>
      # The `panther-compliance-api` API Gateway calls the `panther-compliance-api` lambda.
      # </cfndoc>
      StageName: v1
      TracingEnabled: !Ref TracingEnabled

  RemediationApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody: api/gateway/remediation/api.yml
      EndpointConfiguration: REGIONAL
      Name: panther-remediation-api
      # <cfndoc>
      # The `panther-remediation-api` API Gateway calls the `panther-remediation-api` lambda.
      # </cfndoc>
      StageName: v1
      TracingEnabled: !Ref TracingEnabled

  ResourcesApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody: api/gateway/resources/api.yml
      EndpointConfiguration: REGIONAL
      Name: panther-resources-api
      # <cfndoc>
      # The `panther-resources-api` API Gateway calls the `panther-resources-api` lambda.
      # </cfndoc>
      StageName: v1
      TracingEnabled: !Ref TracingEnabled

Outputs:
  PythonLayerVersionArn:
    Description: Python layer version
    Value: !If [CreatePythonLayer, !Ref PythonLayer, !Ref PythonLayerVersionArn]
  AnalysisApiId:
    Description: Analysis API Gateway ID
    Value: !Ref AnalysisApi
  AnalysisApiEndpoint:
    Description: HTTPS endpoint for the analysis api
    Value: !Sub ${AnalysisApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
  ComplianceApiId:
    Description: Compliance API Gateway ID
    Value: !Ref ComplianceApi
  ComplianceApiEndpoint:
    Description: HTTPS endpoint for the compliance api
    Value: !Sub ${ComplianceApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
  RemediationApiId:
    Description: Remediation API Gateway ID
    Value: !Ref RemediationApi
  RemediationApiEndpoint:
    Description: HTTPS endpoint for the remediation api
    Value: !Sub ${RemediationApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}
  ResourcesApiId:
    Description: Resources API Gateway ID
    Value: !Ref ResourcesApi
  ResourcesApiEndpoint:
    Description: HTTPS endpoint for the resources api
    Value: !Sub ${ResourcesApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}

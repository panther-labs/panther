# Panther is a scalable, powerful, cloud-native SIEM written in Golang/React.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Loading logs, classifying, normalizing and sending downstream

Parameters:
  CloudWatchLogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    Default: 365
  Debug:
    Type: String
    Description: Toggle debug logging
    Default: false
    AllowedValues: [true, false]
  LayerVersionArns:
    Type: CommaDelimitedList
    Description: List of base LayerVersion ARNs to attach to every Lambda function
    Default: ''
  TracingMode:
    Type: String
    Description: Enable XRay tracing on Lambda and API Gateway
    AllowedValues: ['', Active, PassThrough]
    Default: ''

  ProcessedDataBucket:
    Type: String
    Description: S3 bucket for storing processed logs
  SnsTopicArn:
    Type: String
    Description: The SNS Topic to send notifications for new files in staging S3 bucket
  SQSKeyId:
    Type: String
    Description: KMS key ID for SQS encryption

  PantherDatabase:
    Type: String
    Description: Glue database over Panther processed S3 data.

Conditions:
  AttachLayers: !Not [!Equals [!Join ['', !Ref LayerVersionArns], '']]
  TracingEnabled: !Not [!Equals ['', !Ref TracingMode]]

Resources:
  # SQS Queue, DLQ and Lambda
  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: panther-input-data-notifications-queue
      # <cfndoc>
      # This sqs queue receives S3 notifications
      # of log files to be processed by `panther-log-processor` lambda.
      #
      # Failure Impact
      # * Failure of this sqs queue will impact stop log analysis (log ingest and rule processing).
      # * Failed events will go into the `panther-input-data-notifications-queue-dlq`. When the system has recovered they should be re-queued to the `panther-input-data-notifications-queue` using the Panther tool `requeue`.
      # </cfndoc>
      KmsMasterKeyId: !Ref SQSKeyId
      # Reference on KeyReuse: https://amzn.to/2ngIsFB
      KmsDataKeyReusePeriodSeconds: 3600 # 1 hour
      VisibilityTimeout: 180 # Should match lambda
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 10

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: panther-input-data-notifications-queue-dlq
      # <cfndoc>
      # This is the dead letter queue for the `panther-input-data-notifications-queue`.
      # Items are in this queue due to a failure of the `panther-log-processor` lambda.
      # When the system has recovered they should be re-queued to the `panther-input-data-notifications-queue` using
      # the Panther tool `requeue`.
      # </cfndoc>
      MessageRetentionPeriod: 1209600 # Max duration - 14 days

  FunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-log-processor
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: panther-log-processor
      # <cfndoc>
      # The lambda function that processes S3 files from
      # notifications posted to the `panther-input-data-notifications-queue` SQS queue.
      #
      # Troubleshooting
      # * If files cannot be processed errors will be generated. Some root causes can be:
      #   * S3 event configured against a whole bucket rather than a prefix, which causes
      #     files other than the intended logs to be processed.
      #   * Variations in the log format not handled by the parsers.
      #     [Open a bug report](https://github.com/panther-labs/panther/issues).
      #
      #
      # Failure Impact
      # * Failure of this lambda will cause log processing and rule processing (because rules match processed logs) to stop.
      # * Failed events will go into the `panther-input-data-notifications-queue-dlq`. When the system has recovered they should be re-queued to the `panther-input-data-notifications-queue` using the Panther tool `requeue`.
      # * There is the possibility of duplicate data ingested if the failures had partial results.
      # </cfndoc>
      Description: Downloads security logs from S3 for Panther analysis
      CodeUri: ../../out/bin/internal/log_analysis/log_processor/main
      Handler: main
      Layers: !If [AttachLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      MemorySize: 512
      Runtime: go1.x
      Timeout: 180
      Environment:
        Variables:
          DEBUG: !Ref Debug
          S3_BUCKET: !Ref ProcessedDataBucket
          SNS_TOPIC_ARN: !Ref SnsTopicArn
      Events:
        Queue:
          Type: SQS
          Properties:
            Queue: !GetAtt Queue.Arn
            BatchSize: 10
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Policies:
        - Id: ConfirmSubscriptions
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              # This policy allows the log processor to confirm SNS->SQS subscriptions to the panther-input-data-notifications queue.
              # Note that by default SQS queue policy blocks all accounts from subscribing to it.
              # When a user onboards a log source, they specify an AWS Account ID they want to onboard logs from.
              # This account will be whitelisted and SNS topic from it can subscribe to the SQS queue.
              Action: sns:ConfirmSubscription
              Resource: '*'
        - Id: OutputToS3
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: s3:PutObject
              Resource: !Sub arn:${AWS::Partition}:s3:::${ProcessedDataBucket}/logs*
        - Id: NotifySns
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: sns:Publish
              Resource: !Ref SnsTopicArn
        - Id: AssumePantherLogProcessingRole
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Resource: !Sub arn:${AWS::Partition}:iam::*:role/PantherLogProcessingRole
              Condition:
                Bool:
                  aws:SecureTransport: true
        - Id: AccessSqsKms
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:GenerateDataKey
              Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${SQSKeyId}
        - Id: WriteGluePartitions
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - glue:GetPartition
                - glue:CreatePartition
                - glue:GetTable
              Resource:
                - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog
                - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/${PantherDatabase}
                - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/${PantherDatabase}/*

  UpdaterSnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt UpdaterQueue.Arn
      Region: !Ref AWS::Region
      TopicArn: !Ref SnsTopicArn
      RawMessageDelivery: true

  UpdaterQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref UpdaterQueue
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: sqs:SendMessage
            Resource: '*'
            Condition:
              ArnLike:
                aws:SourceArn: !Ref SnsTopicArn

  UpdaterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: panther-datacatalog-updater-queue
      # <cfndoc>
      # This queue contains notifications that include information of new log data.
      #
      # Failure Impact
      # The tables in `panther*` Glue databases  will not be updated with new partitions. This will result in:
      # * Users will not be able to search the latest log data
      # * Users will not be able to see new events that matched some rule.
      # </cfndoc>
      KmsMasterKeyId: !Ref SQSKeyId
      VisibilityTimeout: 30 # Should match lambda
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt UpdaterDeadLetterQueue.Arn
        maxReceiveCount: 10

  UpdaterDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: panther-datacatalog-updater-dlq
      # <cfndoc>
      # This is the dead letter queue for the `panther-datacatalog-updater-queue`.
      # Items are in this queue due to a failure of the `panther-datacatalog-updater` lambda.
      # When the system has recovered they should be re-queued to the `panther-datacatalog-updater-queue` using
      # the Panther tool `requeue`.
      # </cfndoc>
      MessageRetentionPeriod: 1209600 # Max duration - 14 days

  UpdaterFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-datacatalog-updater
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  UpdaterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: panther-datacatalog-updater
      # <cfndoc>
      # This lambda reads events from the `panther-datacatalog-updater-queue` generated by
      # generated by the `panther-rules-engine` and `panther-log-processor` lambda.  It creates new partitions to the Glue tables in `panther*` Glue Databases.
      #
      # Failure Impact
      # The tables in `panther*` Glue databases  will not be updated with new partitions. This will result in:
      # * Users will not be able to search the latest log data
      # * Users will not be able to see new events that matched some rule.
      # </cfndoc>
      Description: Updates the glue data catalog
      CodeUri: ../../out/bin/internal/log_analysis/datacatalog_updater/main
      Handler: main
      Layers: !If [AttachLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      MemorySize: 128
      Runtime: go1.x
      Timeout: 30
      Environment:
        Variables:
          DEBUG: !Ref Debug
      Events:
        Queue:
          Type: SQS
          Properties:
            Queue: !GetAtt UpdaterQueue.Arn
            BatchSize: 10
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Policies:
        - Id: AccessSqsKms
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:GenerateDataKey
              Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${SQSKeyId}
        - Id: WriteGluePartitions
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - glue:GetPartition
                - glue:CreatePartition
                - glue:GetTable
              Resource:
                - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:catalog
                - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:database/panther*
                - !Sub arn:${AWS::Partition}:glue:${AWS::Region}:${AWS::AccountId}:table/panther*

# Panther is a scalable, powerful, cloud-native SIEM written in Golang/React.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Runs rules on incoming events

Parameters:
  CloudWatchLogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    Default: 365
  Debug:
    Type: String
    Description: Toggle debug logging
    Default: false
    AllowedValues: [true, false]
  LayerVersionArns:
    Type: CommaDelimitedList
    Description: List of base LayerVersion ARNs to attach to every Lambda function
    Default: ''
  TracingMode:
    Type: String
    Description: Enable XRay tracing on Lambda and API Gateway
    AllowedValues: ['', Active, PassThrough]
    Default: ''

  AnalysisApiId:
    Type: String
    Description: API Gateway for analysis-api
  PythonLayerArn:
    Type: String
    Description: S3 key for the Python analysis layer
  SnsTopicArn:
    Type: String
    Description: The ARN of the SNS topic
  SQSKeyId:
    Type: String
    Description: KMS key ID for SQS encryption
  ProcessedDataBucket:
    Type: String
    Description: S3 bucket for storing processed logs
  AlertsQueue:
    Type: String
    Description: The queue to forward alerts
    Default: panther-log-alert-notifications-queue

Conditions:
  AttachBaseLayers: !Not [!Equals [!Join ['', !Ref LayerVersionArns], '']]
  TracingEnabled: !Not [!Equals ['', !Ref TracingMode]]

Resources:
  SnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt Queue.Arn
      Region: !Ref AWS::Region
      TopicArn: !Ref SnsTopicArn
      RawMessageDelivery: true
      # Receive notifications only for new log events
      FilterPolicy:
        type:
          - LogData

  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref Queue
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: sqs:SendMessage
            Resource: '*'
            Condition:
              ArnLike:
                aws:SourceArn: !Ref SnsTopicArn

  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: panther-rules-engine-queue
      # <cfndoc>
      # The `panther-rules-engine-queue` sqs queue receives S3 notifications
      # of log files to be processed by `panther-rules-engine` lambda.
      #
      # Failure Impact
      # * Failure of this sqs queue will impact executions of rules on log files.
      # * Failed events will go into the `panther-rules-engine-queue-dlq`. When the system has recovered they should be re-queued to the `panther-rules-engine-queue` using the Panther tool `requeue`.
      # </cfndoc>
      KmsMasterKeyId: !Ref SQSKeyId
      # Reference on KeyReuse: https://amzn.to/2ngIsFB
      KmsDataKeyReusePeriodSeconds: 3600 # 1 hour
      VisibilityTimeout: 120 # Should match lambda
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt [DeadLetterQueue, Arn]
        maxReceiveCount: 10

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: panther-rules-engine-queue-dlq
      # <cfndoc>
      # This is the dead letter queue for the `panther-rules-engine-queue`.
      # Items are in this queue due to a failure of the `panther-rules-engine` lambda.
      # When the system has recovered they should be re-queued to the `panther-rules-engine-queue` using
      # the Panther tool `requeue`.
      # </cfndoc>
      MessageRetentionPeriod: 1209600 # Max duration - 14 days

  ##### Dynamo alert deduplication table #####
  AlertsDedup:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: panther-log-alert-dedup
      # <cfndoc>
      # The `panther-rules-engine` lambda manages this table and it is used to
      # deduplicate of alerts. The `panther-log-alert-forwarder` reads the ddb stream from this table.
      #
      # Failure Impact
      # * Processing of rules could be slowed or stopped if there are errors/throttles.
      # </cfndoc>
      AttributeDefinitions:
        - AttributeName: partitionKey
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      KeySchema:
        - AttributeName: partitionKey
          KeyType: HASH
      SSESpecification:
        SSEEnabled: True
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-rules-engine
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  Function:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../internal/log_analysis/rules_engine
      Description: Python Rules Engine
      FunctionName: panther-rules-engine
      # <cfndoc>
      # The `panther-rules-engine` lambda function processes S3 files from
      # notifications posted to the `panther-rules-engine-queue` SQS queue.
      # Matching events are written to S3.
      #
      # Failure Impact
      # * Failure of this lambda will impact alerts generated for rule matches against log data.
      # * Failed events will go into the `panther-rules-engine-dlq`. When the system has recovered they should be re-queued to the `panther-rules-engine` using the Panther tool `requeue`.
      # </cfndoc>
      Handler: src.main.lambda_handler
      Environment:
        Variables:
          ANALYSIS_API_FQDN: !Sub '${AnalysisApiId}.execute-api.${AWS::Region}.${AWS::URLSuffix}'
          ANALYSIS_API_PATH: v1
          DEBUG: !Ref Debug
          ALERTS_QUEUE: !Ref AlertsQueue
          S3_BUCKET: !Ref ProcessedDataBucket
          NOTIFICATIONS_TOPIC: !Ref SnsTopicArn
          ALERTS_DEDUP_TABLE: !Ref AlertsDedup
      MemorySize: 512
      Events:
        Queue:
          Type: SQS
          Properties:
            Queue: !GetAtt Queue.Arn
            BatchSize: 10
      Layers: !If
        - AttachBaseLayers
        - !Split # CFN doesn't have list append, so convert to/from CSV string to prepend base layers
          - ','
          - !Sub
            - '${base},${pip}'
            - base: !Join [',', !Ref LayerVersionArns]
              pip: !Ref PythonLayerArn
        - [!Ref PythonLayerArn]
      Runtime: python3.7
      Timeout: 120
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Policies:
        - Id: SendToNotificationsTopic
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sns:Publish
              Resource: !Ref SnsTopicArn
        - Id: ReadLogs
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Sub arn:${AWS::Partition}:s3:::${ProcessedDataBucket}/logs/*
        - Id: ReadWriteRuleMatches
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: !Sub arn:${AWS::Partition}:s3:::${ProcessedDataBucket}/rules/*
        - Id: DDBUpdate
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
              Resource: !GetAtt AlertsDedup.Arn
        - Id: AccessKms
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:GenerateDataKey
              Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${SQSKeyId}
        - Id: InvokeGatewayApi
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: execute-api:Invoke
              Resource: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${AnalysisApiId}/v1/GET/enabled

Outputs:
  AlertDedupTableStreamArn:
    Description: ARN of Alert Dedup table stream
    Value: !GetAtt AlertsDedup.StreamArn

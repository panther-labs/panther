# Panther is a scalable, powerful, cloud-native SIEM written in Golang/React.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Loading logs, classifying, normalizing and sending downstream

Parameters:
  CloudWatchLogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    Default: 365
  Debug:
    Type: String
    Description: Toggle debug logging
    Default: false
    AllowedValues: [true, false]
  LayerVersionArns:
    Type: CommaDelimitedList
    Description: List of base LayerVersion ARNs to attach to every Lambda function
    Default: ''
  TracingMode:
    Type: String
    Description: Enable XRay tracing on Lambda and API Gateway
    AllowedValues: ['', Active, PassThrough]
    Default: ''

  AnalysisApiId:
    Type: String
    Description: API Gateway for analysis-api
  AlertDedupTableStreamArn:
    Type: String
    Description: The stream arn of the alerts dedup table
  ProcessedDataBucket:
    Type: String
    Description: S3 bucket for storing processed logs
  SQSKeyId:
    Type: String
    Description: KMS key ID for SQS encryption

Conditions:
  AttachLayers: !Not [!Equals [!Join ['', !Ref LayerVersionArns], '']]
  TracingEnabled: !Not [!Equals ['', !Ref TracingMode]]

Resources:
  ###### Lambda API function #####
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-alerts-api
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  AlertsAPIFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../out/bin/internal/log_analysis/alerts_api/main
      Description: CRUD actions for the alerts database
      Environment:
        Variables:
          DEBUG: !Ref Debug
          ALERTS_TABLE_NAME: !Ref LogAlertsTable
          RULE_INDEX_NAME: ruleId-creationTime-index
          TIME_INDEX_NAME: timePartition-creationTime-index
          ANALYSIS_API_HOST: !Sub '${AnalysisApiId}.execute-api.${AWS::Region}.${AWS::URLSuffix}'
          ANALYSIS_API_PATH: v1
          PROCESSED_DATA_BUCKET: !Ref ProcessedDataBucket
      FunctionName: panther-alerts-api
      # <cfndoc>
      # Lambda for CRUD actions for the alerts API.
      #
      # Failure Impact
      # * Failure of this lambda will impact the Panther user interface.
      # </cfndoc>
      Handler: main
      Layers: !If [AttachLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      MemorySize: 256
      Runtime: go1.x
      Timeout: 60
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Policies:
        - Id: ManageAlerts
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !GetAtt LogAlertsTable.Arn
                - !Sub '${LogAlertsTable.Arn}/index/*'
        - Id: S3Permissions
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - s3:ListBucket
                - s3:GetObject
              Resource:
                - !Sub arn:${AWS::Partition}:s3:::${ProcessedDataBucket}*

  ##### Dynamo table that stores alert information #####
  LogAlertsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: panther-log-alert-info
      # <cfndoc>
      # This table holds the alerts history and is managed by the `panther-log-alert-forwarder` lambda.
      #
      # Failure Impact
      # * Delivery of alerts could be slowed or stopped if there are errors/throttles.
      # * The Panther user interface may be impacted.
      # </cfndoc>
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: creationTime
          AttributeType: S
        - AttributeName: ruleId
          AttributeType: S
        - AttributeName: timePartition
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - # Add an index ruleId to efficiently list alerts for a specific rule
          KeySchema:
            - AttributeName: ruleId
              KeyType: HASH
            - AttributeName: creationTime
              KeyType: RANGE
          IndexName: ruleId-creationTime-index
          Projection:
            ProjectionType: ALL
        - # Add an index using timePartition to efficiently list alerts by creationTime
          KeySchema:
            - AttributeName: timePartition
              KeyType: HASH
            - AttributeName: creationTime
              KeyType: RANGE
          IndexName: timePartition-creationTime-index
          Projection:
            ProjectionType: ALL
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification:
        SSEEnabled: True

  ##### Alert forwarder Lambda
  AlertForwarderLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /aws/lambda/panther-log-alert-forwarder
      RetentionInDays: !Ref CloudWatchLogRetentionDays

  AlertsForwarderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../../out/bin/internal/log_analysis/alert_forwarder/main
      Description: Lambda that creates and updates alerts in alerts-info table
      Environment:
        Variables:
          DEBUG: !Ref Debug
          ALERTS_TABLE: !Ref LogAlertsTable
          ANALYSIS_API_HOST: !Sub '${AnalysisApiId}.execute-api.${AWS::Region}.${AWS::URLSuffix}'
          ANALYSIS_API_PATH: v1
          ALERTING_QUEUE_URL: !Sub https://sqs.${AWS::Region}.${AWS::URLSuffix}/${AWS::AccountId}/panther-alerts-queue
      Events:
        DynamoDBEvent:
          Type: DynamoDB
          Properties:
            Stream: !Ref AlertDedupTableStreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
      FunctionName: panther-log-alert-forwarder
      # <cfndoc>
      # This lambda reads from a DDB stream for the `panther-alert-dedup` table and writes alerts to the `panther-log-alert-info` ddb table.
      # It also forwards alerts to `panther-alerts-queue` SQS queue where the appropriate Lambda picks them up for delivery.
      #
      # Failure Impact
      # * Delivery of alerts could be slowed or stopped.
      # * There will be no data loss until events are purged from the ddb stream (24 hours).
      # * This Lambda processes alerts in batches. In case a batch partially fails, the whole batch will be retried which might lead
      # to duplicate notifications for some alerts.
      # </cfndoc>
      Handler: main
      Layers: !If [AttachLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      MemorySize: 128
      Runtime: go1.x
      Timeout: 30
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Policies:
        - Id: SQS
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:GenerateDataKey
              Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${SQSKeyId}
            - Effect: Allow
              Action:
                - sqs:SendMessage
              Resource: !Sub arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:panther-alerts-queue
        - Id: GetRule
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: execute-api:Invoke
              Resource: !Sub arn:${AWS::Partition}:execute-api:${AWS::Region}:${AWS::AccountId}:${AnalysisApiId}/v1/GET/rule
        - Id: ManageAlerts
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource:
                - !GetAtt LogAlertsTable.Arn

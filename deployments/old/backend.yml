# Panther is a scalable, powerful, cloud-native SIEM written in Golang/React.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Description: Master Panther template for the back-end resources

Parameters:
  AuditRoleName:
    Type: String
    Description: The name of the IAM role to assume to perform AWS account/service scans
  RemediationRoleName:
    Type: String
    Description: The name of the IAM role to assume to perform remediation actions

  CloudWatchLogRetentionDays:
    Type: Number
    Description: CloudWatch log retention period
    Default: 365
  Debug:
    Type: String
    # TODO: configurable logging levels (debug, info, warn, critical)
    Description: Toggle debug logging for all Lambda functions
    Default: false
    AllowedValues: [true, false]
  LayerVersionArns:
    Type: CommaDelimitedList
    Description: List of LayerVersion ARNs to attach to every function
    Default: ''
  LogProcessorLambdaMemorySize:
    Type: Number
    Description: Size of lambda for log processor
  PythonLayerVersionArn:
    Type: String
    Description: Custom Python layer for analysis and remediation
    Default: ''
  TracingMode:
    Type: String
    Description: Enable XRay tracing on Lambda, API Gateway & Appsync
    AllowedValues: ['', Active, PassThrough]
    Default: ''

  # Set automatically by "mage deploy"
  S3BucketAccessLogs:
    Type: String
    Description: The name of the S3 bucket which stores access logs
  S3BucketSource:
    Type: String
    Description: The name of the S3 bucket storing deployment artifacts
  PantherLogProcessingDatabase:
    Type: String
    Description: The name of the database for the output of log processing
    Default: ''

  # Set automatically by "mage deploy" unless PythonLayerVersionArn is specified.
  PythonLayerKey:
    Type: String
    Description: S3 key for the Python analysis layer
    Default: ''
  PythonLayerObjectVersion:
    Type: String
    Description: S3 object version for the python layer zipfile
    Default: ''

  # Set automatically by "mage deploy" unless specified in panther_config
  WebApplicationCertificateArn:
    Type: String
    Description: The ARN of the TLS certificate that is going to be used by the web application

  # Only used if specified in panther_config, otherwise defaults to the URL autogenerated by the load balancer resource
  CustomDomain:
    Type: String
    Description: The FQDN that will be used by the web application
    Default: ''

Conditions:
  CreatePythonLayer: !Equals [!Ref PythonLayerVersionArn, '']
  UseCustomDomain: !Not [!Equals [!Ref CustomDomain, '']]

Resources:
  PythonLayer:
    Condition: CreatePythonLayer
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleRuntimes:
        - python3.6
        - python3.7
      Content:
        S3Bucket: !Ref S3BucketSource
        S3Key: !Ref PythonLayerKey
        S3ObjectVersion: !Ref PythonLayerObjectVersion
      Description: Pip libraries available to the Python analysis/remediation functions
      LayerName: panther-analysis

  ##### Nested Stacks: Log Analysis #####

  LogProcessor:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        CloudWatchLogRetentionDays: !Ref CloudWatchLogRetentionDays
        Debug: !Ref Debug
        LayerVersionArns: !Join [',', !Ref LayerVersionArns]
        LogProcessorLambdaMemorySize: !Ref LogProcessorLambdaMemorySize
        TracingMode: !Ref TracingMode
        SnsTopicArn: !Ref ProcessedDataNotifications
        ProcessedDataBucket: !Ref ProcessedData
        SQSKeyId: !Ref QueueEncryptionKey
        PantherDatabase: !Ref PantherLogProcessingDatabase
      TemplateURL: log_analysis/log_processor.yml

  Alerts:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        CloudWatchLogRetentionDays: !Ref CloudWatchLogRetentionDays
        Debug: !Ref Debug
        LayerVersionArns: !Join [',', !Ref LayerVersionArns]
        TracingMode: !Ref TracingMode

        ProcessedDataBucket: !Ref ProcessedData
        AnalysisApiId: !GetAtt AnalysisAPI.Outputs.GatewayId
        AlertDedupTableStreamArn: !GetAtt RulesEngine.Outputs.AlertDedupTableStreamArn
        SQSKeyId: !Ref QueueEncryptionKey
      TemplateURL: log_analysis/alerts.yml

  RulesEngine:
    Type: AWS::CloudFormation::Stack
    Properties:
      Parameters:
        CloudWatchLogRetentionDays: !Ref CloudWatchLogRetentionDays
        Debug: !Ref Debug
        LayerVersionArns: !Join [',', !Ref LayerVersionArns]
        TracingMode: !Ref TracingMode
        AnalysisApiId: !GetAtt AnalysisAPI.Outputs.GatewayId
        SnsTopicArn: !Ref ProcessedDataNotifications
        SQSKeyId: !Ref QueueEncryptionKey
        ProcessedDataBucket: !Ref ProcessedData
        PythonLayerArn: !If [CreatePythonLayer, !Ref PythonLayer, !Ref PythonLayerVersionArn]
      TemplateURL: log_analysis/rules_engine.yml

# Panther is a scalable, powerful, cloud-native SIEM written in Golang/React.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Description: The service that defines the front-end NodeJS server that serves the Panther web application statics

Parameters:
  VpcId:
    Type: String
    Description: The ID of the VPC associated with the service
  SubnetOneId:
    Type: String
    Description: The ID of a subnet in the VPC above
  SubnetTwoId:
    Type: String
    Description: The ID of another subnet in the VPC above
  LoadBalancerListenerArn:
    Type: String
    Description: The ARN of the load balancer that accepts & forwards incoming traffic to the current ECS tasks
  LoadBalancerSecurityGroupId:
    Type: String
    Description: The ID of the security group that is related with the Load Balancer that sits int front of this service
  ClusterName:
    Type: String
    Description: The name of the cluster that the server should be attached to
  Image:
    Type: String
    Description: The container image to use for the front-end web application server
  ServiceName:
    Type: String
    Description: The name of the service that will host the tasks that serve the application
    Default: panther-web
  Port:
    Type: Number
    Default: 80
    Description: The exposed port of the application, that will be used by the VPC & Container
  CPU:
    Type: Number
    Description: The size of the CPU allocated to the server
  Memory:
    Type: Number
    Description: The MB of memory allocated to the server

Resources:
  # A target group is connected to a network or application load balancer, so it can automatically
  # distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Ref ServiceName
      HealthCheckProtocol: HTTP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /healthcheck
      HealthCheckTimeoutSeconds: 6
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds # Instantly deregister draining targets since we have 200% max capacity
          Value: '0'
      TargetType: ip
      Port: !Ref Port
      Protocol: HTTP
      VpcId: !Ref VpcId

  # Adds the networking stack to a security group and exposes the necessary TCP ports that allow
  # our server to communicate with the outside world.
  WebApplicationServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ServiceName}-container
      GroupDescription: Access to the Fargate containers
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref Port
          ToPort: !Ref Port
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroupId
      VpcId: !Ref VpcId

  EcsSecurityGroupIngressFromPublicALB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref WebApplicationServerSecurityGroup
      IpProtocol: '-1'
      SourceSecurityGroupId: !Ref LoadBalancerSecurityGroupId

  # Create a rule on the load balancer for routing traffic to the target group
  LoadBalancerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - '*'
      ListenerArn: !Ref LoadBalancerListenerArn
      Priority: 1

  # The service that will instantiate a server task and restrict access through our ALB
  WebApplicationServer:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ClusterName
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DeploymentController:
        Type: ECS
      DesiredCount: 1
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 60
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref WebApplicationServerSecurityGroup
          Subnets:
            - !Ref SubnetOneId
            - !Ref SubnetTwoId
      PlatformVersion: LATEST
      SchedulingStrategy: REPLICA
      ServiceName: !Ref ServiceName
      TaskDefinition: !Ref WebApplicationServerDefinition
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref Port
          TargetGroupArn: !Ref TargetGroup

  # The role that allows the containers in the task to pull images and publish logs to CloudWatch
  WebApplicationServerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: PullECRImages
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:ListImages
                  - ecr:ListTagsForResource
                Resource: '*'

  # A log group for storing the stdout logs from the server's task definition
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${ServiceName}-logs

  # The container definition for the image that runs the NodeJS server which serves our assets
  WebApplicationServerDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Name: !Ref ServiceName
          Cpu: !Ref CPU
          DisableNetworking: false
          Environment:
            - Name: SERVER_PORT
              Value: !Ref Port
          Essential: true
          Image: !Ref Image
          Interactive: false
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub ${ServiceName}-logs
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref ServiceName
          Memory: !Ref Memory
          MemoryReservation: !Ref Memory
          PortMappings:
            - ContainerPort: !Ref Port
          ReadonlyRootFilesystem: false
      Cpu: !Ref CPU
      ExecutionRoleArn: !GetAtt WebApplicationServerExecutionRole.Arn
      Family: !Ref ServiceName
      Memory: !Ref Memory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE

Outputs:
  ServiceName:
    Description: The name of the service that the hosts the front-end server
    Value: !GetAtt WebApplicationServer.Name

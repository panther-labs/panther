package main

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

/**
 * Copyright (C) 2020 Panther Labs Inc
 *
 * Panther Enterprise is licensed under the terms of a commercial license available from
 * Panther Labs Inc ("Panther Commercial License") by contacting contact@runpanther.com.
 * All use, distribution, and/or modification of this software, whether commercial or non-commercial,
 * falls under the Panther Commercial License to the extent it is permitted.
 */

import (
	"text/template"
)

var (
	tplClient            = template.Must(template.New(`pkg`).Parse(clientTemplate))
	tplMethodInputOutput = template.Must(template.New(`methodInputOutput`).Parse(methodTemplateInputOutput))
	tplMethodInput       = template.Must(template.New(`methodInput`).Parse(methodTemplateInput))
	tplMethodOutput      = template.Must(template.New(`methodOutput`).Parse(methodTemplateOutput))
)

const clientTemplate = `// Code generated by {{ .Generator }}; DO NOT EDIT.
package {{.PkgName}}

import (
	"context"
	"encoding/json"
	"github.com/aws/aws-sdk-go/service/lambda"
	"github.com/aws/aws-sdk-go/service/lambda/lambdaiface"
	"github.com/pkg/errors"
	{{ range .Imports }}
	{{ .Name }} {{ printf "%q" .Path }}
	{{- end }}
)

{{ range $alias, $typ := .Aliases }}
type {{ $alias }} = {{ $typ }}
{{ end }}

type Lambda{{.API}}Event struct {
{{- range .Methods }}
{{- if .Input }}
	{{ .Name }} *{{ .Name }}Input
{{- else }}
	{{ .Name }} *struct{}
{{- end -}}
{{- end }}
}

type LambdaClient struct {
	lambdaAPI lambdaiface.LambdaAPI
	lambdaName string
}

func NewLambdaClient(lambdaAPI lambdaiface.LambdaAPI, lambdaName string) *LambdaClient {
	return &LambdaClient{
		lambdaAPI: lambdaAPI,
		lambdaName: lambdaName,
	}
}
`

const methodTemplateInputOutput = `
func (c *LambdaClient) {{ .Name }}(ctx context.Context, input *{{.Name}}Input) (*{{.Name}}Output, error) {
	lambdaEvent := Lambda{{.API}}Event{
		{{ .Name }}: input,
	}

	payload, err := json.Marshal(&lambdaEvent)
	if err != nil {
		return nil, err
	}

	lambdaInput := lambda.InvokeInput{
		FunctionName: &c.lambdaName,
		Payload: payload,
	}

	lambdaOutput, err := c.lambdaAPI.InvokeWithContext(ctx, &lambdaInput)
	if err != nil {
		return nil, err
	}
	
	if lambdaError := lambdaOutput.FunctionError; lambdaError != nil {
		return nil, errors.New(*lambdaError)
	}

	output := {{ .Name }}Output{}
	if err := json.Unmarshal(lambdaOutput.Payload, &output); err != nil {
		return nil, err
	}

	return &output, nil
}
`
const methodTemplateInput = `
func (c *LambdaClient) {{ .Name }}(ctx context.Context, input *{{.Name}}Input) error {
	lambdaEvent := Lambda{{.API}}Event{
		{{ .Name }}: input,
	}

	payload, err := json.Marshal(&lambdaEvent)
	if err != nil {
		return err
	}

	lambdaInput := lambda.InvokeInput{
		FunctionName: &c.lambdaName,
		Payload: payload,
	}

	lambdaOutput, err := c.lambdaAPI.InvokeWithContext(ctx, &lambdaInput)
	if err != nil {
		return err
	}
	
	if lambdaError := lambdaOutput.FunctionError; lambdaError != nil {
		return errors.New(*lambdaError)
	}
	return nil
}
`
const methodTemplateOutput = `
func (c *LambdaClient) {{ .Name }}(ctx context.Context) (*{{.Name}}Output, error) {
	lambdaEvent := Lambda{{.API}}Event{
		{{ .Name }}: &struct{}{},
	}

	payload, err := json.Marshal(&lambdaEvent)
	if err != nil {
		return nil, err
	}

	lambdaInput := lambda.InvokeInput{
		FunctionName: &c.lambdaName,
		Payload: payload,
	}

	lambdaOutput, err := c.lambdaAPI.InvokeWithContext(ctx, &lambdaInput)
	if err != nil {
		return nil, err
	}
	
	if lambdaError := lambdaOutput.FunctionError; lambdaError != nil {
		return nil, errors.New(*lambdaError)
	}

	output := {{ .Name }}Output{}
	if err := json.Unmarshal(lambdaOutput.Payload, &output); err != nil {
		return nil, err
	}

	return &output, nil
}
`

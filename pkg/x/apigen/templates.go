package main

/**
 * Panther is a Cloud-Native SIEM for the Modern Security Team.
 * Copyright (C) 2020 Panther Labs Inc
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

import (
	"text/template"
)

var (
	tplClient            = template.Must(template.New(`pkg`).Parse(clientTemplate))
	tplMethodInputOutput = template.Must(template.New(`methodInputOutput`).Parse(methodTemplateInputOutput))
	tplMethodInput       = template.Must(template.New(`methodInput`).Parse(methodTemplateInput))
	tplMethodOutput      = template.Must(template.New(`methodOutput`).Parse(methodTemplateOutput))
)

const clientTemplate = `// Code generated by {{ .Generator }}; DO NOT EDIT.
package {{.PkgName}}

import (
	"context"
	{{ range .Imports }}{{ .Name }} {{ printf "%q" .Path }}{{ end }}
)

// Models

type LambdaEventPayload struct {
{{- range .Methods }}
{{- if .Input }}
	{{ .Name }} *{{ .Name }}Input
{{- else }}
	{{ .Name }} *struct{}
{{- end -}}
{{- end }}
}

{{ .Models }}

// Lambda client

type LambdaClient struct {
	client lambdaclient.Client
}

func NewLambdaClient(client lambdaclient.Client) *LambdaClient {
	if client.Validate == nil {
		client.Validate = func(interface{}) error { return nil }
	}
	return &LambdaClient{
		client: client,
	}
}
`

const methodTemplateInputOutput = `
func (c *LambdaClient) {{ .Name }}(ctx context.Context, input *{{.Name}}Input) (*{{.Name}}Output, error) {
	if err := c.client.Validate(input); err != nil {
		return nil, err
	}
	lambdaEvent := LambdaEventPayload{
		{{ .Name }}: input,
	}
	output := {{ .Name }}Output{}
	if err := c.client.InvokeWithContext(ctx, &lambdaEvent, &output); err != nil {
		return nil, err
	}
	return &output, nil
}
`
const methodTemplateInput = `
func (c *LambdaClient) {{ .Name }}(ctx context.Context, input *{{.Name}}Input) error {
	if err := c.client.Validate(input); err != nil {
		return nil, err
	}
	lambdaEvent := LambdaEventPayload{
		{{ .Name }}: input,
	}
	return c.client.InvokeWithContext(ctx, &lambdaEvent, nil)
}
`
const methodTemplateOutput = `
func (c *LambdaClient) {{ .Name }}(ctx context.Context) (*{{.Name}}Output, error) {
	lambdaEvent := LambdaEventPayload{
		{{ .Name }}: &struct{}{},
	}
	output := {{ .Name }}Output{}
	if err := c.client.InvokeWithContext(ctx, &lambdaEvent, &output); err != nil {
		return nil, err
	}
	return &output, nil
}
`

# Panther is a scalable, powerful, cloud-native SIEM written in Golang/React.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# NOTE: Add at least one of every type of object

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Test CF for generating alarms

Resources:

  # ALB
  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: web
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '30'
      Subnets:
        - !Ref SubnetOneId
        - !Ref SubnetTwoId
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup

  # AppSync
  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: panther-graphql-api
      AuthenticationType: AMAZON_COGNITO_USER_POOLS
      UserPoolConfig:
        AwsRegion: !Ref AWS::Region
        UserPoolId: !Ref UserPoolId
        DefaultAction: ALLOW
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppsyncServiceRole.Arn
        FieldLogLevel: ALL
      XrayEnabled: !If [TracingEnabled, True, !Ref 'AWS::NoValue']

  #### API Gateway #####
  GatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody: api/gateway/resources/api.yml
      EndpointConfiguration: REGIONAL
      Name: panther-resources-api
      StageName: v1 # NOTE: sam also builds a stage called "Stage"

  # DDB
  ComplianceTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: panther-compliance
      AttributeDefinitions:
        - AttributeName: policyId
          AttributeType: S
        - AttributeName: resourceId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - # Add an index for policyId to efficiently search for a specific policy
          KeySchema:
            - AttributeName: policyId
              KeyType: HASH
          IndexName: policy-index
          Projection:
            ProjectionType: ALL
      KeySchema:
        - AttributeName: resourceId
          KeyType: HASH
        - AttributeName: policyId
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: True
      SSESpecification:
        SSEEnabled: True
      TimeToLiveSpecification:
        AttributeName: expiresAt
        Enabled: True

  # SNS
  Notifications:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: test-notifications

  # SQS Queue, DLQ and Lambda
  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: test-sqs
      KmsMasterKeyId: !Ref SQSKeyId
      # Reference on KeyReuse: https://amzn.to/2ngIsFB
      KmsDataKeyReusePeriodSeconds: 3600 # 1 hour
      VisibilityTimeout: 10
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 10

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: test-sqs-dlq
      MessageRetentionPeriod: 1209600 # Max duration - 14 days

  # Lambda
  Function:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: test-lambda
      Description: Test lambda
      CodeUri: ../../out/bin/internal/test/main
      Handler: main
      Layers: !If [AttachLayers, !Ref LayerVersionArns, !Ref 'AWS::NoValue']
      MemorySize: 128
      Runtime: go1.x
      Timeout: 60
      Events:
        Queue:
          Type: SQS
          Properties:
            Queue: !GetAtt Queue.Arn
            BatchSize: 10
      Tracing: !If [TracingEnabled, !Ref TracingMode, !Ref 'AWS::NoValue']
      Policies:
        - Id: ReceiveFromInputSqsQueue
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - sqs:DeleteMessage
                - sqs:GetQueueAttributes
                - sqs:ReceiveMessage
              Resource: !GetAtt Queue.Arn
        - Id: OutputToS3
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: s3:PutObject
              Resource: !Sub arn:${AWS::Partition}:s3:::${ProcessedDataBucket}/logs*
        - Id: NotifySns
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action: sns:Publish
              Resource: !Ref SnsTopicArn
        - Id: AccessSqsKms
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Action:
                - kms:Decrypt
                - kms:Encrypt
                - kms:GenerateDataKey
              Resource: !Sub arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${SQSKeyId}


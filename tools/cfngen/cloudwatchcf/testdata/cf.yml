# Panther is a Cloud-Native SIEM for the Modern Security Team.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

# NOTE: Add at least one of every type of object

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Test CF for generating alarms

Resources:
  # SNS
  Notifications:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: test-notifications

  # SQS Queue, DLQ and Lambda
  Queue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: test-sqs
      KmsMasterKeyId: !Ref SQSKeyId
      # Reference on KeyReuse: https://amzn.to/2ngIsFB
      KmsDataKeyReusePeriodSeconds: 3600 # 1 hour
      VisibilityTimeout: 10
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 10

  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: test-sqs-dlq
      MessageRetentionPeriod: 1209600 # Max duration - 14 days

  MyStateMachine:
    Type: 'AWS::StepFunctions::StateMachine'
    Properties:
      StateMachineName: my-state-machine
      DefinitionString: !Sub
        - |-
          {
            "Comment": "A Hello World example using an AWS Lambda function",
            "StartAt": "HelloWorld",
            "States": {
              "HelloWorld": {
                "Type": "Task",
                "Resource": "${lambdaArn}",
                "End": true
              }
            }
          }
        - { lambdaArn: !GetAtt [MyLambdaFunction, Arn] }
      RoleArn: !GetAtt [StatesExecutionRole, Arn]
